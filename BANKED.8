;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ banked                                            ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³ copyright (C) 2017 jeff panici                    ³
;³ https://nybbles.io                                ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

code segment
    jmp     start

include constant.8
include macro.8
include string.8
include control.8
include memory.8
include io.8
include input.8
include bank.8
include timer.8
include vga.8
include video.8
include mouse.8
include sound.8

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ editor constants                                  ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

STATE_NO_FILE   equ 1
STATE_NO_BANK   equ 2
STATE_SPR_BANK  equ 3
STATE_TILE_BANK equ 4
STATE_PAL_BANK  equ 5
STATE_BG_BANK   equ 6

F_BTN_NONE      equ 0000_0000_0000_0000xb
F_BTN_ENABLED   equ 0000_0000_0000_0001xb
F_BTN_END       equ 1000_0000_0000_0000xb

F_TXT_NONE      equ 0000_0000xb
F_TXT_ENABLED   equ 0000_0001xb
F_TXT_END       equ 1000_0000xb

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ editor structures & variables                     ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

state_action struc [bp]
    state_code      db ?
    state_callback  dw ?
ends

valid_key struc [bp]
    vk_code     db ?
    vk_mod_code db ?
    vk_ascii    db ?
ends

valid_key_def macro
    db #1, #2, #3
#em

text_field struc [bp]
    txt_flags       db ?
    txt_size        db ?
    txt_pos         dw ?
    txt_keys        dw ?
    txt_buffer      dw ?
    txt_char_idx    db ?
    txt_pad         db ?
ends

text_field_def macro
    db #2, #3
    dw #4, #5, #1_buffer, 0

#1_buffer:
    db #3 dup(0)
#em

button struc [bp]
    btn_flags   dw ?
    btn_txt     dw ?
    btn_txt_pos dw ?
    btn_pos     dw ?
    btn_size    dw ?
    btn_func    dw ?
ends

buttondef macro
    dw #1, #2, #3, #4, #5, #6
#em

even

state               db      STATE_NO_FILE
exit_code           db      ?
temp_ptr            dw      ?
fps                 db      ?
caret_vis           db      ?
caret_pos           dw      ?
draw_flag           db      ?
mouse_data          dw      2 dup (?)

frame_rate:         strdef  '00'
file_label:         strdef  'BANK FILE:'
editor_label:       strdef  'EDITOR:'
banks_label:        strdef  'BANKS:'
new_label:          strdef  'NEW'
load_label:         strdef  'LOAD'
save_label:         strdef  'SAVE'
exit_label:         strdef  'EXIT'
add_label:          strdef  'ADD'
remove_label:       strdef  'REMOVE'
clear_label:        strdef  'CLEAR'
tool_title:         strdef  'BANKED'
tool_version:       strdef  'v1.0'
tool_author:        strdef  'JEFF PANICI'
tool_copyright:     strdef  '(C) 2017 NYBBLES.IO'

buttons:
btn_new:            buttondef F_BTN_ENABLED, new_label,    8 by 23,  0 by 20,  38 by 10, 0
btn_load:           buttondef F_BTN_ENABLED, load_label,   7 by 35,  0 by 32,  38 by 10, 0
btn_save:           buttondef F_BTN_NONE,    save_label,   7 by 47,  0 by 44,  38 by 10, 0
btn_exit:           buttondef F_BTN_ENABLED, exit_label,   7 by 59,  0 by 56,  38 by 10, btn_exit_cb
btn_add:            buttondef F_BTN_NONE,    add_label,   10 by 203, 0 by 200, 38 by 10, 0
btn_remove:         buttondef F_BTN_NONE,    remove_label, 2 by 215, 0 by 212, 38 by 10, 0
btn_clear:          buttondef F_BTN_NONE,    clear_label,  5 by 227, 0 by 224, 38 by 10, 0
                    buttondef F_BTN_END,     0,            0,        0,        0

input_events:
quit_key_evt:       def_inp_evt     T_INPUT_KEY, K_ESC

                    def_inp_evt     0,           0

input_bindings:
quit_bind:          def_inp_bind    B_QUIT,     'QUIT            ', exit,      quit_key_evt,     0,                0, 0

                    def_inp_bind    0,          '                ', 0,         0,                0,                0, 0

valid_fname_keys:
                    valid_key_def   016h,   0,  '1'
                    valid_key_def   01eh,   0,  '2'
                    valid_key_def   026h,   0,  '3'
                    valid_key_def   025h,   0,  '4'
                    valid_key_def   02eh,   0,  '5'
                    valid_key_def   036h,   0,  '6'
                    valid_key_def   03dh,   0,  '7'
                    valid_key_def   03eh,   0,  '8'
                    valid_key_def   046h,   0,  '9'
                    valid_key_def   045h,   0,  '0'
                    valid_key_def   01ch,   0,  'A'
                    valid_key_def   032h,   0,  'B'
                    valid_key_def   021h,   0,  'C'
                    valid_key_def   023h,   0,  'D'
                    valid_key_def   024h,   0,  'E'
                    valid_key_def   02bh,   0,  'F'
                    valid_key_def   034h,   0,  'G'
                    valid_key_def   033h,   0,  'H'
                    valid_key_def   043h,   0,  'I'
                    valid_key_def   03bh,   0,  'J'
                    valid_key_def   042h,   0,  'K'
                    valid_key_def   04bh,   0,  'L'
                    valid_key_def   03ah,   0,  'M'
                    valid_key_def   031h,   0,  'N'
                    valid_key_def   044h,   0,  'O'
                    valid_key_def   04dh,   0,  'P'
                    valid_key_def   015h,   0,  'Q'
                    valid_key_def   02dh,   0,  'R'
                    valid_key_def   01bh,   0,  'S'
                    valid_key_def   02ch,   0,  'T'
                    valid_key_def   03ch,   0,  'U'
                    valid_key_def   02ah,   0,  'V'
                    valid_key_def   01dh,   0,  'W'
                    valid_key_def   022h,   0,  'X'
                    valid_key_def   035h,   0,  'Y'
                    valid_key_def   01ah,   0,  'Z'
                    valid_key_def   049h,   0,  '.'
                    valid_key_def   04eh,   0,  '-'
                    valid_key_def   04eh, 012h, '_'
                    valid_key_def   0,      0,   0

valid_hex_keys:
                    valid_key_def   016h,   0,  '1'
                    valid_key_def   01eh,   0,  '2'
                    valid_key_def   026h,   0,  '3'
                    valid_key_def   025h,   0,  '4'
                    valid_key_def   02eh,   0,  '5'
                    valid_key_def   036h,   0,  '6'
                    valid_key_def   03dh,   0,  '7'
                    valid_key_def   03eh,   0,  '8'
                    valid_key_def   046h,   0,  '9'
                    valid_key_def   045h,   0,  '0'
                    valid_key_def   01ch,   0,  'A'
                    valid_key_def   032h,   0,  'B'
                    valid_key_def   021h,   0,  'C'
                    valid_key_def   023h,   0,  'D'
                    valid_key_def   024h,   0,  'E'
                    valid_key_def   02bh,   0,  'F'
                    valid_key_def   0,      0,  0

valid_dec_keys:
                    valid_key_def   016h,   0,  '1'
                    valid_key_def   01eh,   0,  '2'
                    valid_key_def   026h,   0,  '3'
                    valid_key_def   025h,   0,  '4'
                    valid_key_def   02eh,   0,  '5'
                    valid_key_def   036h,   0,  '6'
                    valid_key_def   03dh,   0,  '7'
                    valid_key_def   03eh,   0,  '8'
                    valid_key_def   046h,   0,  '9'
                    valid_key_def   045h,   0,  '0'
                    valid_key_def   0,      0,  0

text_fields:
bank_file_field:    text_field_def  bank_file, F_TXT_NONE, 11, 42 by 10, valid_fname_keys

state_actions:
    db  STATE_NO_FILE
    dw  no_file

    db  STATE_NO_BANK
    dw  no_bank

    db  STATE_TILE_BANK
    dw  tile_bank

    db  STATE_SPR_BANK
    dw  spr_bank

    db  0
    dw  0

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ main tool engine                                  ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

draw_caret:
    cs mov  al, caret_vis
    cmp     al, 0
    jz      >l0
    cs mov  ax, caret_pos
    frect   ax, 5 by 5, 7 by 0
l0: ret

no_file:
    ret

no_bank:
    ret

tile_bank:
    ret

spr_bank:
    frect   17 by 43, 144 by 144, 8 by 0
    rect    42 by 16, 146 by 145, 0 by 0
    ret

cur_right:
    ret

cur_down:
    ret

cur_left:
    ret

cur_up:
    ret

btn_exit_cb:
    jmp     exit

fps_timer:
    reset_timer
    mov     di, frame_rate + 1
    xor     ax, ax
    cs mov  al, fps
    call    put_dec2
    cs mov  fps, 0
    ret

caret_timer:
    reset_timer
    not     caret_vis
    ret

;
; allocate memory
;
allocate:
    alloc   SZ_CTRL_RAM / 16,  offset ctrl_ram_ptr
    memset  ctrl_ram_ptr, 0, SZ_CTRL_RAM, 0

    mov     es, ctrl_ram_ptr
    mov     bp, 0

    alloc   SZ_TILE_BANK / 16, offset temp_ptr
    memset  temp_ptr, 0, SZ_TILE_BANK, 024h
    es_movm c_bg_tiles, temp_ptr

    alloc   SZ_TILE_BANK / 16, offset temp_ptr
    memset  temp_ptr,   0, SZ_TILE_BANK, 07fh
    es_movm c_spr_tiles, temp_ptr

    alloc   SZ_VRAM / 16, offset back_buffer_ptr
    memset  back_buffer_ptr, 0, SZ_VRAM, 0

    ret

;
; initialize everything
;
init:
    call    allocate
    mode_13
    mode_p  modeq_params
    call    mouse_init
    call    init_keyboard_isr
    call    init_timer_isr

    timer   offset fps_timer, 60
    timer   offset caret_timer, 25
    cs mov  caret_pos, 42 by 10

    ret

;
; update the tool state
;
fire_buttons:
    cs mov  bp, mouse_data
    cs mov  bx, ms_pos
    cs mov  ax, ms_btn
    test    al, F_LEFT_MOUSE_BTN
    jnz     >l0
    ret
l0: cs mov  bp, buttons
l1: cs mov  ax, btn_flags
    test    ax, F_BTN_END
    jz      >l2
    ret
l2: test    ax, F_BTN_ENABLED
    jz      >l4
l3: cs mov  ax, btn_pos
    cs mov  cx, btn_size
    cs mov  dx, ax
    add     dx, cx
    cmp     bh, al
    jb      >l4
    cmp     bh, dl
    ja      >l4
    cmp     bl, ah
    jb      >l4
    cmp     bl, dh
    ja      >l4
    cmp     btn_func, 0
    jz      >l4
    cs call [btn_func]
l4: add     bp, type button
    jmp     l1
    ret

update:
    fire_timers
    mread   mouse_data
    call    fire_buttons
p0: next_key
    cmp     al, 0
    je      >p1
    cmp     al, K_ESC
    je      >p2
p1: ret
p2: jmp     exit

;
; render the video scene
;
draw_base:
    frect   0 by 0, 38 by 256, 8 by 0
    vline   38 by 0, 256, 0 by 0

    string  offset micro_font, file_label,   42 by 2, 7 by 0, 1
    string  offset micro_font, editor_label,206 by 2, 7 by 0, 1

    string  offset micro_font, tool_title,  1 by 2, 0 by 0, 1
    string  offset micro_font, tool_title,  2 by 3, 7 by 0, 1

    string  offset micro_font, tool_version, 16 by 8, 0 by 0, 0
    string  offset micro_font, tool_version, 17 by 9, 7 by 0, 0

    hline   38 by 189, 218,     0 by 0
    frect   38 by 190, 218 by 9,8 by 0
    hline   38 by 198, 218,     0 by 0
    string  offset micro_font, banks_label, 4 by 191, 7 by 0, 1
    ret


draw_buttons:
    cs mov  bp, buttons
l0: cs mov  ax, btn_flags
    test    ax, F_BTN_END
    jz      >l1
    ret
l1: test    ax, F_BTN_ENABLED
    jz      >l3
l2: cs mov  ax, btn_pos
    cs mov  cx, btn_size
    xor     bx, bx
    mov     bl, ch
    frect   ax, cx, 9 by 0
    hline   ax, bx, 0 by 0
    cs mov  si, btn_txt
    cs mov  dx, btn_txt_pos
    string  offset micro_font, si, dx, 7 by 0, 1
    add     al, cl
    hline   ax, bx, 0 by 0
l3: add     bp, type button
    jmp     l0
    ret

draw:
    cs cmp  draw_flag, 1
    je      >l0
    ret

l0: cs mov  draw_flag, 0
    clear
    call    draw_base
    call    draw_caret
    call    draw_buttons

l5:
#if DEBUG
    string  offset micro_font, frame_rate, 244 by 251, 0 by 0, 1
#endif
    mdraw   mouse_data, cursor_pointer2
    ret

show:
    is_vblank
    cmp     al, 0
    jnz     >l0
    ret
l0: flip
    wait_novblank
    update_input    input_events
    fire_bindings   input_bindings
    cs inc  fps
    cs mov  draw_flag, 1
    ret

;
; entry point
;
start:
    call    init

;
; the heart
;
tool_loop:
    cs call update
    cs call draw
    cs call show
    jmp     tool_loop

;
; the end
;
exit:
    call    reset_timer_isr
    call    reset_keyboard_isr
    mode_03
    mov     ah, 04ch
    mov     al, exit_code
    int     21h
    ret
