;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ tile edit                                         ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³ copyright (C) 2017 jeff panici                    ³
;³ https://nybbles.io                                ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

code segment
    jmp     start

include constant.8
include macro.8
include control.8
include memory.8
include io.8
include timer.8
include video.8
include mouse.8

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ editor structures & variables                     ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
even

state               db  ?
exit_code           db  ?
temp_ptr            dw  ?
tooltitle:          db  'TILE EDIT'
tool_copyright:     db  '(C) 2017 JEFF PANICI'

inp_action struc [bp]
    inp_scan_code   db ?
    inp_callback    dw ?
ends

inp_actions:
    db  KEY_LEFT
    dw  cur_left

    db  KEY_RIGHT
    dw  cur_right

    db  KEY_UP
    dw  cur_up

    db  KEY_DOWN
    dw  cur_down

    db  0
    dw  0

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ main tool engine                                  ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cur_right:
    ret

cur_down:
    ret

cur_left:
    ret

cur_up:
    ret

;
; allocate memory
;
allocate:
    alloc   CTRL_RAM_SIZE / 16,  offset ctrl_ram_ptr
    memset  ctrl_ram_ptr, 0, CTRL_RAM_SIZE, 0

    mov     es, ctrl_ram_ptr
    mov     bp, 0

    alloc   TILE_BANK_SIZE / 16, offset temp_ptr
    memset  temp_ptr, 0, TILE_BANK_SIZE, 024h
    es_movm c_bg_tiles, temp_ptr

    alloc   TILE_BANK_SIZE / 16, offset temp_ptr
    memset  temp_ptr,   0, TILE_BANK_SIZE, 07fh
    es_movm c_spr_tiles, temp_ptr

    alloc   VRAM_SIZE / 16, offset back_buffer_ptr
    memset  back_buffer_ptr, 0, VRAM_SIZE, 0

    ret

;
; initialize everything
;
init:
    call    allocate
    mode_13
    mode_q
    call    mouse_init
    call    init_keyboard_isr
    call    init_timer_isr
    ret

;
; update the tool state
;
update:
    fire_timers

    mouse
    cs mov  bp, inp_actions
    mov     cx, 4
p0: next_key
    cmp     al, 0
    je      >p4
    cmp     al, KEY_ESC
    je      >p5
    dec     cx
    cmp     cx, 0
    jz      >p4
p1: cs mov  bl, inp_scan_code
    cmp     bl, 0
    jnz     >p2
    cs mov  bp, inp_actions
    jmp     p0
p2: cmp     al, bl
    je      >p3
    cs add  bp, type inp_action
    jmp     p1
p3: cs call [inp_callback]
    jmp     p0
p4: ret
p5: jmp     exit

;
; render the video scene
;   bg 1
;   fg
;   bg 2
;   text
draw:
    wait_novblank
    wait_vblank

    clear
    video_fg

    flip
    ret

;
; entry point
;
start:
    call    init

;
; the heart
;
tool_loop:
    cs call update
    cs call draw
    jmp     tool_loop

;
; the end
;
exit:
    call    reset_timer_isr
    call    reset_keyboard_isr
    mode_03
    mov     ah, 04ch
    mov     al, exit_code
    int     21h
    ret
