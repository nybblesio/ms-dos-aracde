;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ banked                                            ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³ copyright (C) 2017 jeff panici                    ³
;³ https://nybbles.io                                ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

code segment
    jmp     start

include constant.8
include macro.8
include string.8
include input.8
include control.8
include memory.8
include io.8
include bank.8
include timer.8
include vga.8
include video.8
include mouse.8

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ editor constants                                  ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

STATE_NO_FILE   equ 1
STATE_NO_BANK   equ 2
STATE_SPR_BANK  equ 3
STATE_TILE_BANK equ 4
STATE_PAL_BANK  equ 5
STATE_BG_BANK   equ 6

F_BTN_NONE      equ 0000_0000_0000_0000xb
F_BTN_ENABLED   equ 0000_0000_0000_0001xb
F_BTN_END       equ 1000_0000_0000_0000xb

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ editor structures & variables                     ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

state_action struc [bp]
    state_code      db ?
    state_callback  dw ?
ends

button struc [bp]
    btn_flags   dw ?
    btn_txt     dw ?
    btn_txt_pos dw ?
    btn_pos     dw ?
    btn_size    dw ?
    btn_func    dw ?
ends

buttondef macro
    dw #1, #2, #3, #4, #5, #6
#em

even

state               db      STATE_NO_FILE
exit_code           db      ?
temp_ptr            dw      ?
fps                 db      ?
caret_vis           db      ?
caret_pos           dw      ?
draw_flag           db      ?
mouse_data          dw      2 dup (?)

frame_rate:         strdef  '00'
file_label:         strdef  'BANK FILE:'
editor_label:       strdef  'EDITOR:'
banks_label:        strdef  'BANKS:'
new_label:          strdef  'NEW'
load_label:         strdef  'LOAD'
save_label:         strdef  'SAVE'
exit_label:         strdef  'EXIT'
add_label:          strdef  'ADD'
remove_label:       strdef  'REMOVE'
clear_label:        strdef  'CLEAR'
tool_title:         strdef  'BANKED'
tool_version:       strdef  'v1.0'
tool_author:        strdef  'JEFF PANICI'
tool_copyright:     strdef  '(C) 2017 NYBBLES.IO'

buttons:
btn_new:            buttondef F_BTN_ENABLED, new_label,    8 by 23,  0 by 20,  38 by 10, 0
btn_load:           buttondef F_BTN_ENABLED, load_label,   7 by 35,  0 by 32,  38 by 10, 0
btn_save:           buttondef F_BTN_NONE,    save_label,   7 by 47,  0 by 44,  38 by 10, 0
btn_exit:           buttondef F_BTN_ENABLED, exit_label,   7 by 59,  0 by 56,  38 by 10, btn_exit_cb
btn_add:            buttondef F_BTN_NONE,    add_label,   10 by 203, 0 by 200, 38 by 10, 0
btn_remove:         buttondef F_BTN_NONE,    remove_label, 2 by 215, 0 by 212, 38 by 10, 0
btn_clear:          buttondef F_BTN_NONE,    clear_label,  5 by 227, 0 by 224, 38 by 10, 0
                    buttondef F_BTN_END,     0,            0,        0,        0

state_actions:
    db  STATE_NO_FILE
    dw  no_file

    db  STATE_NO_BANK
    dw  no_bank

    db  STATE_TILE_BANK
    dw  tile_bank

    db  STATE_SPR_BANK
    dw  spr_bank

    db  0
    dw  0

input_actions:
    defie   T_INPUT_KEY, K_LEFT,  cur_left,  0, 0
    defie   T_INPUT_KEY, K_RIGHT, cur_right, 0, 0
    defie   T_INPUT_KEY, K_UP,    cur_up,    0, 0
    defie   T_INPUT_KEY, K_DOWN,  cur_down,  0, 0
    defie   0,           0,       0,         0, 0

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ main tool engine                                  ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

draw_caret:
    cs mov  al, caret_vis
    cmp     al, 0
    jz      >l0
    cs mov  ax, caret_pos
    frect   ax, 5 by 5, 7 by 0
l0: ret

no_file:
    ret

no_bank:
    ret

tile_bank:
    ret

spr_bank:
    frect   17 by 43, 144 by 144, 8 by 0
    rect    42 by 16, 146 by 145, 0 by 0
    ret

cur_right:
    ret

cur_down:
    ret

cur_left:
    ret

cur_up:
    ret

btn_exit_cb:
    jmp     exit

fps_timer:
    reset_timer
    mov     di, frame_rate + 1
    xor     ax, ax
    cs mov  al, fps
    call    put_dec2
    cs mov  fps, 0
    ret

caret_timer:
    reset_timer
    not     caret_vis
    ret

;
; allocate memory
;
allocate:
    alloc   CTRL_RAM_SIZE / 16,  offset ctrl_ram_ptr
    memset  ctrl_ram_ptr, 0, CTRL_RAM_SIZE, 0

    mov     es, ctrl_ram_ptr
    mov     bp, 0

    alloc   TILE_BANK_SIZE / 16, offset temp_ptr
    memset  temp_ptr, 0, TILE_BANK_SIZE, 024h
    es_movm c_bg_tiles, temp_ptr

    alloc   TILE_BANK_SIZE / 16, offset temp_ptr
    memset  temp_ptr,   0, TILE_BANK_SIZE, 07fh
    es_movm c_spr_tiles, temp_ptr

    alloc   VRAM_SIZE / 16, offset back_buffer_ptr
    memset  back_buffer_ptr, 0, VRAM_SIZE, 0

    ret

;
; initialize everything
;
init:
    call    allocate
    mode_13
    mode_p  modeq_params
    call    mouse_init
    call    init_keyboard_isr
    call    init_timer_isr

    ldfreetimer
    es mov  tm_callback, fps_timer
    es mov  tm_frames, 60
    es mov  tm_count, 60
    es mov  tm_flags, F_TIMER_ENABLED

    ldfreetimer
    es mov  tm_callback, caret_timer
    es mov  tm_frames, 25
    es mov  tm_count, 25
    es mov  tm_flags, F_TIMER_ENABLED

    cs mov  caret_pos, 42 by 10
    ret

;
; update the tool state
;
update:
    fire_timers
    mread   mouse_data

    cs mov  bp, input_actions
    mov     cx, 4
p0: next_key
    cmp     al, 0
    je      >p4
    cmp     al, K_ESC
    je      >p5
    dec     cx
    cmp     cx, 0
    jz      >p4
p1: cs mov  bl, ia_code
    cmp     bl, 0
    jnz     >p2
    cs mov  bp, input_actions
    jmp     p0
p2: cmp     al, bl
    je      >p3
    cs add  bp, type input_action
    jmp     p1
p3: cs call [ia_callback]
    jmp     p0
p4: ret
p5: jmp     exit

;
; render the video scene
;
draw_base:
    frect   0 by 0, 38 by 256, 8 by 0
    vline   38 by 0, 256, 0 by 0

    string  offset micro_font, file_label,   42 by 2, 7 by 0, 1
    string  offset micro_font, editor_label,206 by 2, 7 by 0, 1

    string  offset micro_font, tool_title,  1 by 2, 0 by 0, 1
    string  offset micro_font, tool_title,  2 by 3, 7 by 0, 1

    string  offset micro_font, tool_version, 16 by 8, 0 by 0, 0
    string  offset micro_font, tool_version, 17 by 9, 7 by 0, 0

    hline   38 by 189, 218,     0 by 0
    frect   38 by 190, 218 by 9,8 by 0
    hline   38 by 198, 218,     0 by 0
    string  offset micro_font, banks_label, 4 by 191, 7 by 0, 1
    ret

draw:
    cs cmp  draw_flag, 1
    je      >l0
    ret

l0: cs mov  draw_flag, 0
    clear
    call    draw_base
    call    draw_caret

    cs mov  bp, buttons
l1: cs mov  ax, btn_flags
    test    ax, F_BTN_END
    jz      >l2
    jmp     long >l5
l2: test    ax, F_BTN_ENABLED
    jz      >l4
l3: cs mov  ax, btn_pos
    cs mov  cx, btn_size
    xor     bx, bx
    mov     bl, ch
    frect   ax, cx, 9 by 0
    hline   ax, bx, 0 by 0
    cs mov  si, btn_txt
    cs mov  dx, btn_txt_pos
    string  offset micro_font, si, dx, 7 by 0, 1
    add     al, cl
    hline   ax, bx, 0 by 0
l4: add     bp, type button
    jmp     l1

l5:
#if DEBUG
    string  offset micro_font, frame_rate, 244 by 251, 0 by 0, 1
#endif
    mdraw   mouse_data
    ret

show:
    is_vblank
    cmp     al, 0
    jnz     >l0
    ret
l0: cs inc  fps
    flip
    cs mov  draw_flag, 1
    ret

;
; entry point
;
start:
    call    init

;
; the heart
;
tool_loop:
    cs call update
    cs call draw
    cs call show
    jmp     tool_loop

;
; the end
;
exit:
    call    reset_timer_isr
    call    reset_keyboard_isr
    mode_03
    mov     ah, 04ch
    mov     al, exit_code
    int     21h
    ret
