;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ banked                                            ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³ copyright (C) 2017 jeff panici                    ³
;³ https://nybbles.io                                ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

code segment
    jmp     start

include constant.8
include macro.8
include string.8
include file.8
include control.8
include memory.8
include io.8
include input.8
include bank.8
include timer.8
include vga.8
include video.8
include mouse.8
include sound.8
include caret.8
include button.8
include txtfield.8
include stmach.8
include msgbox.8
include tiled.8

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ constants                                         ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

ST_BASE      equ 1
ST_NO_FILE   equ 2
ST_NEW_FILE  equ 3
ST_LOAD_FILE equ 4
ST_BANK      equ 5
ST_SPR_BANK  equ 6
ST_TILE_BANK equ 7
ST_PAL_BANK  equ 8
ST_BG_BANK   equ 9
ST_FONT_BANK equ 10
ST_SND_BANK  equ 11
ST_MOD_BANK  equ 12
ST_MSGBOX    equ 13

TAB_BAR_X    equ 38
TAB_BAR_Y    equ 160
TAB_BAR_H    equ 10
TAB_BAR_B    equ TAB_BAR_Y + TAB_BAR_H

PB_Y         equ TAB_BAR_B - 2
PB_X         equ 40
PB_MY        equ PB_Y + 12
PB_MX        equ PB_X + 4

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ macros                                            ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

vw_func macro
    push    bp
    mov     bp, viewer_cb
    mov     w[bp], #1
    pop     bp
#em

vw_clr macro
    push    bp
    mov     bp, viewer_cb
    mov     w[bp], 0
    pop     bp
#em

key_common macro
    jmp long >m0

#1_jt:
    dw      K_ESC
    dw      #1_esc

    dw      K_RIGHT
    dw      #1_right

    dw      K_LEFT
    dw      #1_left

    dw      K_UP
    dw      #1_up

    dw      K_DOWN
    dw      #1_down

    dw      K_PAGEUP
    dw      #1_prev

    dw      K_PAGEDOWN
    dw      #1_next

    dw      K_RBRACKET
    dw      #1_palnext

    dw      K_LBRACKET
    dw      #1_palprev

    dw      K_0
    dw      #1_clr0

    dw      K_1
    dw      #1_clr1

    dw      K_2
    dw      #1_clr2

    dw      K_3
    dw      #1_clr3

    dw      K_4
    dw      #1_clr4

    dw      K_5
    dw      #1_clr5

    dw      K_6
    dw      #1_clr6

    dw      K_7
    dw      #1_clr7

    dw      K_8
    dw      #1_clr8

    dw      K_9
    dw      #1_clr9

    dw      0, 0

#1_esc:
    mov     al, 2
    ret

#1_right:
    cmp     #2, #3 -1   ; idx var & max
    je      >k0
    inc     #2
k0: mov     al, 1
    ret

#1_left:
    cmp     #2, 0       ; idx var & min
    je      >k0
    dec     #2
k0: mov     al, 1
    ret

#1_up:
    cmp     #2, #4      ; idx var & size per row
    jb      >k0
    sub     #2, #4
k0: mov     al, 1
    ret

#1_down:
                        ; idx var & last row
    cmp     #2, (#3 - #4) - 1
    ja      >k0
    add     #2, #4
k0: mov     al, 1
    ret

#1_prev:
    call    btn_block_prev_cb
    mov     al, 1
    ret

#1_next:
    call    btn_block_next_cb
    mov     al, 1
    ret

#1_palprev:
    call    btn_pal_prev_cb
    mov     al, 1
    ret

#1_palnext:
    call    btn_pal_next_cb
    mov     al, 1
    ret

#1_clr0:
    mov     tiled_pal_color, 0
    mov     al, 1
    ret

#1_clr1:
    mov     tiled_pal_color, 1
    mov     al, 1
    ret

#1_clr2:
    mov     tiled_pal_color, 2
    mov     al, 1
    ret

#1_clr3:
    mov     tiled_pal_color, 3
    mov     al, 1
    ret

#1_clr4:
    mov     tiled_pal_color, 4
    mov     al, 1
    ret

#1_clr5:
    mov     tiled_pal_color, 5
    mov     al, 1
    ret

#1_clr6:
    mov     tiled_pal_color, 6
    mov     al, 1
    ret

#1_clr7:
    mov     tiled_pal_color, 7
    mov     al, 1
    ret

#1_clr8:
    mov     tiled_pal_color, 8
    mov     al, 1
    ret

#1_clr9:
    mov     tiled_pal_color, 9
    mov     al, 1
    ret

m0: key
    cmp     al, 0
    je      >m9
    cmp     al, 0e0h
    je      m0
    mov     bp, #1_jt
m1: mov     bx, w[bp]
    cmp     bl, 0
    je      >m9
    cmp     al, bl
    jne     >m2
    mov     bx, w[bp + 2]
    call    bx
    jmp     >m9
m2: add     bp, 4
    jmp     m1
m9:
#em

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ structures & variables                            ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

frame_rate:
    s$_def  '00'

file_label:
    s$_def  'BANK FILE:'

banks_label:
    s$_def  'BANKS:'

new_label:
    s$_def  'NEW'

load_label:
    s$_def  'LOAD'

save_label:
    s$_def  'SAVE'

exit_label:
    s$_def  'EXIT'

add_label:
    s$_def  'ADD'

ok_label:
    s$_def  'OK'

cancel_label:
    s$_def  'CANCEL'

remove_label:
    s$_def  'REMOVE'

clear_label:
    s$_def  'CLEAR'

props_label:
    s$_def  'PROPS'

pal_label:
    s$_def  'PAL'

tileset_label:
    s$_def  'TILES'

tool_title:
    s$_def  'BANKED'

tool_version:
    s$_def  'v1.0'

tool_author:
    s$_def  'JEFF PANICI'

tool_copyright:
    s$_def  '(C) 2017 NYBBLES.IO'

pick_type_title:
    s$_def  'PICK'

temp_number1:
    s$_def  '00'

temp_number2:
    s$_def  '00'

temp_number3:
    s$_def  '00'

tab_label:
    s$_def  '00:TILE'

palette_number:
    s$_def  '00'

block_label:
    s$_def  'BLOCK #'

block_number:
    s$_def  '00'

of_label:
    s$_def  'OF'

block_total_number:
    s$_def  '00'

state_number:
    s$_def  '00'

up_arrow_char:
    s$_defc 24

down_arrow_char:
    s$_defc 25

right_arrow_char:
    s$_defc 26

left_arrow_char:
    s$_defc 27

type_tile:
    s$_def  'TILE'

type_spr:
    s$_def  'SPR '

type_font:
    s$_def  'FONT'

type_bg:
    s$_def  'BG  '

type_pal:
    s$_def  'PAL '

type_snd:
    s$_def  'SND '

type_mod:
    s$_def  'MOD '

type_name_lookup:
    dw      type_spr, type_tile, type_bg, type_font, type_pal, type_snd, type_mod

exist_bank_msg1:
    s$_def  '   BANK FILE IS ALREADY ACTIVE'
exist_bank_msg2:
    s$_def  '       WANT TO START OVER?'

buttons:
btn_new:
    bt_def F_BTN_VISIBLE, new_label, 8 by 22, 0 by 20, 38 by 8, 9 by 0, 0 by 0, btn_new_cb

btn_load:
    bt_def F_BTN_VISIBLE, load_label, 7 by 32, 0 by 30, 38 by 8, 9 by 0, 0 by 0, btn_load_cb

btn_save:
    bt_def F_BTN_VISIBLE, save_label, 7 by 42, 0 by 40, 38 by 8, 9 by 0, 0 by 0,btn_save_cb

btn_exit:
    bt_def F_BTN_VISIBLE, exit_label, 7 by 52, 0 by 50, 38 by 8, 9 by 0, 0 by 0, btn_exit_cb

btn_add:
    bt_def F_BTN_VISIBLE, add_label, 10 by TAB_BAR_B + 6, 0 by TAB_BAR_B + 4, 38 by 8, 9 by 0, 0 by 0, btn_add_bank_cb

btn_remove:
    bt_def F_BTN_VISIBLE, remove_label, 2 by TAB_BAR_B + 16, 0 by TAB_BAR_B + 14, 38 by 8, 9 by 0, 0 by 0, btn_remove_bank_cb

btn_clear:
    bt_def F_BTN_VISIBLE, clear_label, 5 by TAB_BAR_B + 26, 0 by TAB_BAR_B + 24, 38 by 8, 9 by 0, 0 by 0, btn_clear_bank_cb

btn_props:
    bt_def F_BTN_VISIBLE, props_label, 5 by TAB_BAR_B + 36, 0 by TAB_BAR_B + 34, 38 by 8, 9 by 0, 0 by 0, btn_props_bank_cb

btn_pal:
    bt_def F_BTN_NONE, pal_label, 10 by TAB_BAR_B + 52, 0 by TAB_BAR_B + 50, 38 by 8, 6 by 0, 0 by 0, btn_pal_cb

btn_tileset:
    bt_def F_BTN_NONE, tileset_label, 4 by TAB_BAR_B + 62, 0 by TAB_BAR_B + 60, 38 by 8, 6 by 0, 0 by 0, btn_tileset_cb

btn_ok:
    bt_def F_BTN_NONE, ok_label, 220 by 107, 205 by 105, 38 by 8, 9 by 0, 0 by 0, btn_ok_cb

btn_cancel:
    bt_def F_BTN_NONE, cancel_label, 167 by 107, 165 by 105, 38 by 8, 9 by 0, 0 by 0, btn_cancel_cb

btn_tab1:
    bt_def F_BTN_NODRAW or F_BTN_ENABLED, 0, 0, TAB_BAR_X + 10 by TAB_BAR_Y + 1, 48 by 9,9 by 0, 0 by 0, btn_tab1_cb

btn_tab2:
    bt_def F_BTN_NODRAW or F_BTN_ENABLED, 0, 0, TAB_BAR_X + 60 by TAB_BAR_Y + 1, 48 by 9,9 by 0, 0 by 0, btn_tab2_cb

btn_tab3:
    bt_def F_BTN_NODRAW or F_BTN_ENABLED, 0, 0, TAB_BAR_X + 110 by TAB_BAR_Y + 1, 48 by 9, 9 by 0, 0 by 0, btn_tab3_cb

btn_tab4:
    bt_def F_BTN_NODRAW or F_BTN_ENABLED, 0, 0, TAB_BAR_X + 160 by TAB_BAR_Y + 1, 48 by 9, 9 by 0, 0 by 0, btn_tab4_cb

btn_pal_prev:
    bt_def F_BTN_TXTONLY, left_arrow_char, 145 by 10, 145 by 10, 6 by 6, 0, 0, btn_pal_prev_cb

btn_pal_next:
    bt_def F_BTN_TXTONLY, right_arrow_char, 170 by 10, 170 by 10, 6 by 6, 0, 0, btn_pal_next_cb

btn_bank_prev:
    bt_def F_BTN_TXTONLY or F_BTN_VISIBLE, left_arrow_char, TAB_BAR_X + 2 by TAB_BAR_Y + 3, TAB_BAR_X + 2 by TAB_BAR_Y + 3, 6 by 6, 0, 0, btn_bank_prev_cb

btn_bank_next:
    bt_def F_BTN_TXTONLY or F_BTN_VISIBLE, right_arrow_char, 248 by TAB_BAR_Y + 3, 248 by TAB_BAR_Y + 3, 6 by 6, 0, 0, btn_bank_next_cb

btn_block_prev:
    bt_def F_BTN_TXTONLY or F_BTN_VISIBLE, up_arrow_char, 248 by TAB_BAR_Y + 14, 248 by TAB_BAR_Y + 14, 6 by 6, 0, 0, btn_block_prev_cb

btn_block_next:
    bt_def F_BTN_TXTONLY or F_BTN_VISIBLE, down_arrow_char, 248 by 248, 248 by 248, 6 by 6, 0, 0, btn_block_next_cb

btn_type_tile:
    bt_def F_BTN_NONE, type_tile, PB_MX + 4 by PB_MY + 2, PB_MX by PB_MY, 28 by 8, 9 by 0, 0 by 0, btn_type_tile_cb

btn_type_spr:
    bt_def F_BTN_NONE, type_spr, PB_MX + 6 by PB_MY + 12, PB_MX by PB_MY + 10, 28 by 8, 9 by 0, 0 by 0, btn_type_spr_cb

btn_type_font:
    bt_def F_BTN_NONE, type_font, PB_MX + 4 by PB_MY + 22, PB_MX by PB_MY + 20, 28 by 8, 9 by 0, 0 by 0, btn_type_font_cb

btn_type_pal:
    bt_def F_BTN_NONE, type_pal, PB_MX + 6 by PB_MY + 32, PB_MX by PB_MY + 30, 28 by 8, 9 by 0, 0 by 0, btn_type_pal_cb

btn_type_bg:
    bt_def F_BTN_NONE, type_bg, PB_MX + 8 by PB_MY + 42, PB_MX by PB_MY + 40, 28 by 8, 9 by 0, 0 by 0, btn_type_bg_cb

btn_type_snd:
    bt_def F_BTN_NONE, type_snd, PB_MX + 6 by PB_MY + 52, PB_MX by PB_MY + 50, 28 by 8, 9 by 0, 0 by 0, btn_type_snd_cb

btn_type_mod:
    bt_def F_BTN_NONE, type_mod, PB_MX + 6 by PB_MY + 62, PB_MX by PB_MY + 60, 28 by 8, 9 by 0, 0 by 0, btn_type_mod_cb

    bt_def F_BTN_END, 0, 0, 0, 0, 0, 0

valid_fname_keys:
    vk_def   002h,    0,  '1'
    vk_def   003h,    0,  '2'
    vk_def   004h,    0,  '3'
    vk_def   005h,    0,  '4'
    vk_def   006h,    0,  '5'
    vk_def   007h,    0,  '6'
    vk_def   008h,    0,  '7'
    vk_def   009h,    0,  '8'
    vk_def   00ah,    0,  '9'
    vk_def   00bh,    0,  '0'
    vk_def   01eh,    0,  'A'
    vk_def   030h,    0,  'B'
    vk_def   02eh,    0,  'C'
    vk_def   020h,    0,  'D'
    vk_def   012h,    0,  'E'
    vk_def   021h,    0,  'F'
    vk_def   022h,    0,  'G'
    vk_def   023h,    0,  'H'
    vk_def   017h,    0,  'I'
    vk_def   024h,    0,  'J'
    vk_def   025h,    0,  'K'
    vk_def   026h,    0,  'L'
    vk_def   032h,    0,  'M'
    vk_def   031h,    0,  'N'
    vk_def   018h,    0,  'O'
    vk_def   019h,    0,  'P'
    vk_def   010h,    0,  'Q'
    vk_def   013h,    0,  'R'
    vk_def   01fh,    0,  'S'
    vk_def   014h,    0,  'T'
    vk_def   016h,    0,  'U'
    vk_def   02fh,    0,  'V'
    vk_def   011h,    0,  'W'
    vk_def   02dh,    0,  'X'
    vk_def   015h,    0,  'Y'
    vk_def   02ch,    0,  'Z'
    vk_def   034h,    0,  '.'
    vk_def   00ch,    0,  '-'
    vk_def   00ch, 02ah,  '_'
    vk_def   0,       0,   0

valid_hex_keys:
    vk_def   002h,   0,  '1'
    vk_def   003h,   0,  '2'
    vk_def   004h,   0,  '3'
    vk_def   005h,   0,  '4'
    vk_def   006h,   0,  '5'
    vk_def   007h,   0,  '6'
    vk_def   008h,   0,  '7'
    vk_def   009h,   0,  '8'
    vk_def   00ah,   0,  '9'
    vk_def   00bh,   0,  '0'
    vk_def   01eh,   0,  'A'
    vk_def   030h,   0,  'B'
    vk_def   02eh,   0,  'C'
    vk_def   020h,   0,  'D'
    vk_def   012h,   0,  'E'
    vk_def   021h,   0,  'F'
    vk_def   0,      0,   0

valid_dec_keys:
    vk_def   002h,   0,  '1'
    vk_def   003h,   0,  '2'
    vk_def   004h,   0,  '3'
    vk_def   005h,   0,  '4'
    vk_def   006h,   0,  '5'
    vk_def   007h,   0,  '6'
    vk_def   008h,   0,  '7'
    vk_def   009h,   0,  '8'
    vk_def   00ah,   0,  '9'
    vk_def   00bh,   0,  '0'
    vk_def   0,      0,   0

text_fields:
bank_file_field:
    tf_def  F_TXT_READONLY, temp_fname, 42 by 10, valid_fname_keys, bank_fname_cb

    tf_def  F_TXT_END, 0, 0, 0, 0

base_state:
    st_def  ST_BASE,        base_state_enter_cb, base_state_upd_cb, base_state_leave_cb

no_file_state:
    st_def  ST_NO_FILE,     no_file_enter_cb,    no_file_upd_cb,    no_file_leave_cb

new_file_state:
    st_def  ST_NEW_FILE,    new_file_enter_cb,   new_file_upd_cb,   new_file_leave_cb

load_file_state:
    st_def  ST_LOAD_FILE,   load_file_enter_cb,  load_file_upd_cb,  load_file_leave_cb

bank_state:
    st_def  ST_BANK,        bank_enter_cb,       bank_upd_cb,       bank_leave_cb

tile_bank_state:
    st_def  ST_TILE_BANK,   tile_bank_enter_cb,  tile_bank_upd_cb,  tile_bank_leave_cb

spr_bank_state:
    st_def  ST_SPR_BANK,    spr_bank_enter_cb,   spr_bank_upd_cb,   spr_bank_leave_cb

pal_bank_state:
    st_def  ST_PAL_BANK,    pal_bank_enter_cb,   pal_bank_upd_cb,   pal_bank_leave_cb

font_bank_state:
    st_def  ST_FONT_BANK,   font_bank_enter_cb,  font_bank_upd_cb,  font_bank_leave_cb

bg_bank_state:
    st_def  ST_BG_BANK,     bg_bank_enter_cb,    bg_bank_upd_cb,    bg_bank_leave_cb

snd_bank_state:
    st_def  ST_SND_BANK,    snd_bank_enter_cb,   snd_bank_upd_cb,   snd_bank_leave_cb

mod_bank_state:
    st_def  ST_MOD_BANK,    mod_bank_enter_cb,   mod_bank_upd_cb,   mod_bank_leave_cb

msgbox_state:
    st_def  ST_MSGBOX,      msgbox_enter_cb,     msgbox_upd_cb,     msgbox_leave_cb

temp_fname:
    s$_resv     12

bank_fname:
    fnameresv   12

fps             db  ?
exit_code       db  ?
temp_ptr        dw  ?
mouse_data:     dw  2 dup (?)
viewer_cb:      dw  0
selected_tb     db  0
pb_draw_flag    db  0
block_idx       db  0
block_max       db  0
bank_start_off  dw  0
bank_start_idx  db  0
bank_prev_flag  db  0
bank_next_flag  db  0

;
; palette editor
;
palette_idx     db  0
color_temp:     db  3 dup (?)

;
; tile editor
;
tile_idx        db  0

;
; sprite editor
;
sprite_idx      db  0

;
; font editor
;
glyph_idx       db  0

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ block utiltity functions                          ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
update_block_number:
    xor     ah, ah
    mov     al, block_idx
    inc     al
    s$_dec2 block_number, al
    ret

update_block_total:
    es mov  al, md_blk_max
    mov     block_max, al
    s$_dec2 block_total_number, al
    ret

tb_blk macro
    push    ax
    xor     ah, ah
    mov     al, selected_tb
    dec     al
    bk_ptr  ax
    pop     ax
#em

tb_go macro
    push    es, bp, si, ax, bx
    mov     ax, #1
    dec     ax
    bk_ptr  ax
    xor     ax, ax
    es mov  al, md_type
    dec     al
    xlatw   al, bank_select_jt
    cs call si
    pop     bx, ax, si, bp, es
#em

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ nop state callbacks                               ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nop_cb:
    nop
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ msgbox state callbacks                            ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
msgbox_show:
    st_chk  ST_MSGBOX
    cmp     al, 1
    je      >l0
    st_push msgbox_state
    mov     b mb_enabled, 1
    bt_set  btn_ok, F_BTN_ENABLED or F_BTN_VISIBLE
    bt_set  btn_cancel, F_BTN_ENABLED or F_BTN_VISIBLE
l0: ret

msgbox_enter_cb:
    ret

msgbox_upd_cb:
    bt_fire mouse_data, buttons
    key
    cmp     al, K_ESC
    je      >l0
    cmp     al, K_ENTER
    je      >l1
    mov     al, 1
    ret
l0: call    btn_cancel_cb
    ret
l1: call    btn_ok_cb
    ret

msgbox_leave_cb:
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ base state callbacks                              ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
base_state_enter_cb:
    ; check if we have a file and push appropriate
    ; state, e.g. bank_state or no_file_state
    st_push no_file_state
    ret

base_state_upd_cb:
    ret

base_state_leave_cb:
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ no file state callbacks                           ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
no_file_leave_cb:
    ret

no_file_enter_cb:
    bt_set  btn_new, F_BTN_ENABLED or F_BTN_VISIBLE
    bt_set  btn_load, F_BTN_ENABLED or F_BTN_VISIBLE
    bt_set  btn_exit, F_BTN_ENABLED or F_BTN_VISIBLE
    tf_set  bank_file_field, F_TXT_READONLY
    ret

no_file_upd_cb:
    bt_fire mouse_data, buttons
    mov     al, 0
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ new file state callbacks                          ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
new_file_enter_cb:
    mb_chk
    cmp     al, 1
    jnz     >l0
    st_pop
l0: ret

new_file_upd_cb:
    tf_upd  text_fields
    mov     al, 1
    ret

new_file_leave_cb:
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ load file state callbacks                         ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
load_file_enter_cb:
    ret

load_file_upd_cb:
    tf_upd  text_fields
    mov     al, 1
    ret

load_file_leave_cb:
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ bank state callbacks                              ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bank_enter_cb:
    bt_set  btn_add, F_BTN_ENABLED or F_BTN_VISIBLE
    bt_set  btn_new, F_BTN_ENABLED or F_BTN_VISIBLE
    bt_set  btn_load, F_BTN_ENABLED or F_BTN_VISIBLE
    bt_set  btn_exit, F_BTN_ENABLED or F_BTN_VISIBLE
    tf_set  bank_file_field, F_TXT_READONLY
    ret

bank_upd_cb:
    bt_fire mouse_data, buttons
    mov     al, 0
    ret

bank_leave_cb:
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ tile bank state callbacks                         ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
tile_bank_enter_cb:
    tb_blk
    te_cfg  8 by 15, 63
    vw_func tile_viewer_cb
    mov     b block_idx, 0
    call    update_block_number
    call    update_block_total
    bt_set  btn_pal_next, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    bt_set  btn_pal_prev, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    bt_set  btn_block_next, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    bt_set  btn_block_prev, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    ret

tile_bank_upd_cb:
    bt_fire mouse_data, buttons
    key_common  tile_keys, tile_idx, 127, 22
    cmp     al, 2
    jne     >l0
    ret
l0: te_upd  22 by 9, 126, offset tile_idx
    mov     al, 1
    ret

tile_bank_leave_cb:
    vw_clr
    bt_set  btn_pal_next, F_BTN_TXTONLY
    bt_set  btn_pal_prev, F_BTN_TXTONLY
    bt_set  btn_block_next, F_BTN_VISIBLE or F_BTN_TXTONLY
    bt_set  btn_block_prev, F_BTN_VISIBLE or F_BTN_TXTONLY
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ sprite bank state callbacks                       ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
spr_bank_enter_cb:
    tb_blk
    te_cfg  16 by 7, 255
    vw_func spr_viewer_cb
    mov     b block_idx, 0
    call    update_block_number
    call    update_block_total
    bt_set  btn_pal_next, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    bt_set  btn_pal_prev, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    bt_set  btn_block_next, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    bt_set  btn_block_prev, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    ret

spr_bank_upd_cb:
    bt_fire mouse_data, buttons
    key_common  spr_keys, sprite_idx, 31, 12
    cmp     al, 2
    jne     >l0
    ret
l0: te_upd  12 by 17, 30, offset sprite_idx
    mov     al, 1
    ret

spr_bank_leave_cb:
    vw_clr
    bt_set  btn_pal_next, F_BTN_TXTONLY
    bt_set  btn_pal_prev, F_BTN_TXTONLY
    bt_set  btn_block_next, F_BTN_VISIBLE or F_BTN_TXTONLY
    bt_set  btn_block_prev, F_BTN_VISIBLE or F_BTN_TXTONLY
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ palette bank state callbacks                      ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
pal_bank_enter_cb:
    tb_blk
    vw_func pal_viewer_cb
    mov     b block_idx, 0
    mov     b palette_idx, 0
    call    update_block_number
    call    update_block_total
    bt_set  btn_block_next, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    bt_set  btn_block_prev, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    ret

pal_bank_upd_cb:
    bt_fire mouse_data, buttons
    key_common  pal_keys, palette_idx, 16, 8
    cmp     al, 2
    jne     >l0
    ret
l0: te_upd  8 by 25, 15, offset palette_idx
    mov     al, 1
    ret

pal_bank_leave_cb:
    vw_clr
    bt_set  btn_block_next, F_BTN_VISIBLE or F_BTN_TXTONLY
    bt_set  btn_block_prev, F_BTN_VISIBLE or F_BTN_TXTONLY
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ background bank state callbacks                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bg_bank_enter_cb:
    tb_blk
    vw_func bg_viewer_cb
    mov     b block_idx, 0
    call    update_block_number
    call    update_block_total
    bt_set  btn_block_next, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    bt_set  btn_block_prev, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    ret

bg_bank_upd_cb:
    bt_fire mouse_data, buttons
    mov     al, 0
    ret

bg_bank_leave_cb:
    vw_clr
    bt_set  btn_block_next, F_BTN_VISIBLE or F_BTN_TXTONLY
    bt_set  btn_block_prev, F_BTN_VISIBLE or F_BTN_TXTONLY
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ sound bank state callbacks                        ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
snd_bank_enter_cb:
    tb_blk
    vw_func snd_viewer_cb
    mov     b block_idx, 0
    call    update_block_number
    call    update_block_total
    bt_set  btn_block_next, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    bt_set  btn_block_prev, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    ret

snd_bank_upd_cb:
    bt_fire mouse_data, buttons
    mov     al, 0
    ret

snd_bank_leave_cb:
    vw_clr
    bt_set  btn_block_next, F_BTN_VISIBLE or F_BTN_TXTONLY
    bt_set  btn_block_prev, F_BTN_VISIBLE or F_BTN_TXTONLY
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ module bank state callbacks                       ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
mod_bank_enter_cb:
    tb_blk
    vw_func mod_viewer_cb
    mov     b block_idx, 0
    call    update_block_number
    call    update_block_total
    bt_set  btn_block_next, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    bt_set  btn_block_prev, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    ret

mod_bank_upd_cb:
    bt_fire mouse_data, buttons
    mov     al, 0
    ret

mod_bank_leave_cb:
    vw_clr
    bt_set  btn_block_next, F_BTN_VISIBLE or F_BTN_TXTONLY
    bt_set  btn_block_prev, F_BTN_VISIBLE or F_BTN_TXTONLY
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ font bank state callbacks                         ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
font_bank_enter_cb:
    tb_blk
    te_cfg  6 by 20, 36
    vw_func font_viewer_cb
    mov     b block_idx, 0
    call    update_block_number
    call    update_block_total
    bt_set  btn_pal_next, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    bt_set  btn_pal_prev, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    bt_set  btn_block_next, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    bt_set  btn_block_prev, F_BTN_VISIBLE or F_BTN_ENABLED or F_BTN_TXTONLY
    ret

font_bank_upd_cb:
    bt_fire mouse_data, buttons
    key_common  font_keys, glyph_idx, 128, 29
    cmp     al, 2
    jne     >l0
    ret
l0: te_upd  29 by 7, 127, offset glyph_idx
    mov     al, 1
    ret

font_bank_leave_cb:
    vw_clr
    bt_set  btn_pal_next, F_BTN_TXTONLY
    bt_set  btn_pal_prev, F_BTN_TXTONLY
    bt_set  btn_block_next, F_BTN_VISIBLE or F_BTN_TXTONLY
    bt_set  btn_block_prev, F_BTN_VISIBLE or F_BTN_TXTONLY
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ bank_fname_cb                                     ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bank_fname_cb:
    cmp     al, 0
    jne     >l0
    bt_set  btn_new, F_BTN_ENABLED or F_BTN_VISIBLE
    st_pop
    ret
l0: s$_cpy  bank_fname, temp_fname, 12
    st_pop
    st_push bank_state
    bt_set  btn_new, F_BTN_ENABLED or F_BTN_VISIBLE
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ exit_cb                                           ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
exit_cb:
    call    tm_shutdown
    call    io_shutdown
    call    vg_shutdown
    mov     ah, 04ch
    mov     al, exit_code
    int     21h
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ bank selection tab callbacks                      ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
even
bank_select_jt:
    dw      spr_bank_select
    dw      tile_bank_select
    dw      bg_bank_select
    dw      font_bank_select
    dw      pal_bank_select
    dw      snd_bank_select
    dw      mod_bank_select

bk_go macro
    st_top
    cmp     st_code, ST_BANK
    je      >b0
    st_pop
b0: st_push #1
#em

spr_bank_select:
    bk_go   spr_bank_state
    ret

tile_bank_select:
    bk_go   tile_bank_state
    ret

bg_bank_select:
    bk_go   bg_bank_state
    ret

font_bank_select:
    bk_go   font_bank_state
    ret

pal_bank_select:
    bk_go   pal_bank_state
    ret

snd_bank_select:
    bk_go   snd_bank_state
    ret

mod_bank_select:
    bk_go   mod_bank_state
    ret

btn_tab1_cb:
    push    bx
    mov     bx, 1
    add     bl, bank_start_idx
    mov     selected_tb, bl
    tb_go   bx
    bt_set  btn_remove, F_BTN_ENABLED or F_BTN_VISIBLE
    bt_set  btn_clear, F_BTN_ENABLED or F_BTN_VISIBLE
    bt_set  btn_props, F_BTN_ENABLED or F_BTN_VISIBLE
    pop     bx
    ret

btn_tab2_cb:
    push    bx
    mov     bx, 2
    add     bl, bank_start_idx
    mov     selected_tb, bl
    tb_go   bx
    bt_set  btn_remove, F_BTN_ENABLED or F_BTN_VISIBLE
    bt_set  btn_clear, F_BTN_ENABLED or F_BTN_VISIBLE
    bt_set  btn_props, F_BTN_ENABLED or F_BTN_VISIBLE
    pop     bx
    ret

btn_tab3_cb:
    push    bx
    mov     bx, 3
    add     bl, bank_start_idx
    mov     selected_tb, bl
    tb_go   bx
    bt_set  btn_remove, F_BTN_ENABLED or F_BTN_VISIBLE
    bt_set  btn_clear, F_BTN_ENABLED or F_BTN_VISIBLE
    bt_set  btn_props, F_BTN_ENABLED or F_BTN_VISIBLE
    pop     bx
    ret

btn_tab4_cb:
    push    bx
    mov     bx, 4
    add     bl, bank_start_idx
    mov     selected_tb, bl
    tb_go   bx
    bt_set  btn_remove, F_BTN_ENABLED or F_BTN_VISIBLE
    bt_set  btn_clear, F_BTN_ENABLED or F_BTN_VISIBLE
    bt_set  btn_props, F_BTN_ENABLED or F_BTN_VISIBLE
    pop     bx
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_ok_cb                                         ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_ok_cb:
    mov     b mb_enabled, 0
    mov     b mb_action_flag, 1
    mov     b mb_result, 1
    mb_clr
    bt_set  btn_ok, F_BTN_NONE
    bt_set  btn_cancel, F_BTN_NONE
    st_pop
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_cancel_cb                                     ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_cancel_cb:
    mov     al, 0
    mov     b mb_enabled, 0
    mov     b mb_action_flag, 1
    mov     b mb_result, 0
    mb_clr
    bt_set  btn_ok, F_BTN_NONE
    bt_set  btn_cancel, F_BTN_NONE
    st_pop
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_new_cb                                        ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_new_cb:
    push    bp
    bt_set  btn_new, F_BTN_VISIBLE
    st_chk  ST_BANK
    push    ax
    st_push new_file_state
    tf_set  bank_file_field, F_TXT_EDIT
    tf_load bank_file_field
    xor     bx, bx
    mov     bl, txt_char_idx
    call    txt_end
    pop     ax
    cmp     al, 1
    jnz     >l0
    xor     cx, cx
    mov     bp, exist_bank_msg1
    mov     cl, b[bp]
    s$_cpy  mb_line3, exist_bank_msg1, cx
    mov     bp, exist_bank_msg2
    mov     cl, b[bp]
    s$_cpy  mb_line4, exist_bank_msg2, cx
    pop     bp
    call    msgbox_show
l0: pop     bp
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_load_cb                                       ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_load_cb:
    bt_set  btn_load, F_BTN_VISIBLE
    call    msgbox_show
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_save_cb                                       ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_save_cb:
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ pb_hide                                           ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
pb_hide:
    mov     b pb_draw_flag, 0
    bt_set  btn_type_tile, F_BTN_NONE
    bt_set  btn_type_spr, F_BTN_NONE
    bt_set  btn_type_font, F_BTN_NONE
    bt_set  btn_type_pal, F_BTN_NONE
    bt_set  btn_type_bg, F_BTN_NONE
    bt_set  btn_type_snd, F_BTN_NONE
    bt_set  btn_type_mod, F_BTN_NONE
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ pb_show                                           ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
pb_show:
    mov     b pb_draw_flag, 1
    bt_set  btn_type_tile, F_BTN_VISIBLE or F_BTN_ENABLED
    bt_set  btn_type_spr, F_BTN_VISIBLE or F_BTN_ENABLED
    bt_set  btn_type_font, F_BTN_VISIBLE or F_BTN_ENABLED
    bt_set  btn_type_pal, F_BTN_VISIBLE or F_BTN_ENABLED
    bt_set  btn_type_bg, F_BTN_VISIBLE or F_BTN_ENABLED
    bt_set  btn_type_snd, F_BTN_VISIBLE or F_BTN_ENABLED
    bt_set  btn_type_mod, F_BTN_VISIBLE or F_BTN_ENABLED
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_add_limit                                     ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_add_limit:
    push    ax
    mov     ax, bank_hdrs_off
    cmp     ax, type bank_block * 14
    jb      >l0
    bt_set  btn_add, F_BTN_VISIBLE
l0: pop     ax
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_add_bank_cb                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_add_bank_cb:
    call    pb_show
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_remove_bank_cb                                ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_remove_bank_cb:
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_clear_bank_cb                                 ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_clear_bank_cb:
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_props_bank_cb                                 ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_props_bank_cb:
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_pal_cb                                        ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_pal_cb:
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_tileset_cb                                    ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_tileset_cb:
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ bank_prev                                         ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bank_prev:
    push    ax
    mov     ax, bank_start_off
    cmp     ax, 0
    jz      >l0
    sub     ax, type bank_block
    mov     bank_start_off, ax
    dec     bank_start_idx
l0: pop     ax
    ret
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_bank_prev_cb                                  ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_bank_prev_cb:
    mov     bank_prev_flag, 1
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ bank_next                                         ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bank_next:
    push    ax, bx
    mov     ax, bank_start_off
    mov     bx, bank_hdrs_off
    sub     bx, type bank_block
    cmp     ax, bx
    jae     >l0
    add     ax, type bank_block
    mov     bank_start_off, ax
    inc     bank_start_idx
l0: pop     bx, ax
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_bank_next_cb                                  ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_bank_next_cb:
    mov     bank_next_flag, 1
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_block_prev_cb                                 ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_block_prev_cb:
    cmp     block_idx, 0
    jz      >l0
    dec     block_idx
    call    update_block_number
l0: ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_block_next_cb                                 ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_block_next_cb:
    mov     al, block_max
    dec     al
    cmp     block_idx, al
    je      >l0
    inc     block_idx
    call    update_block_number
l0: ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_type_tile_cb                                  ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
tile_block_init_cb:
    mov     di, bp
    add     di, 5
    cld
    mov     cx, 1022
    mov     ax, 0707
l0: stosw
    stosw
    rol     ax, 4
    loop    l0
    ret

btn_type_tile_cb:
    call    pb_hide
    bk_new  BANK_TYPE_TILE, 16, tile_block_init_cb
    call    btn_add_limit
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_type_spr_cb                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
spr_block_init_cb:
    mov     di, bp
    add     di, 5
    cld
    mov     cx, 511
    mov     ax, 0707
l0: stosw
    stosw
    stosw
    stosw
    rol     ax, 4
    loop    l0
    ret

btn_type_spr_cb:
    call    pb_hide
    bk_new  BANK_TYPE_SPR, 16, spr_block_init_cb
    call    btn_add_limit
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_type_font_cb                                  ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
font_block_init_cb:
    mov     di, bp
    add     di, 5
    cld
    mov     cx, 1363
    mov     al, 07
l0: stosb
    stosb
    stosb
    rol     al, 4
    loop    l0
    ret

btn_type_font_cb:
    call    pb_hide
    bk_new  BANK_TYPE_FONT, 2, font_block_init_cb
    call    btn_add_limit
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_type_bg_cb                                    ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bg_block_init_cb:
    ret

btn_type_bg_cb:
    call    pb_hide
    bk_new  BANK_TYPE_BG, 2, bg_block_init_cb
    call    btn_add_limit
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_type_pal_cb                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
pal_block_init_cb:
    mov     di, bp
    add     di, 5
    mov     bp, color_temp
    mov     cx, 255
    mov     dx, 0
l0: sc_palr dx
    sc_rgbr color_temp
    cs mov  al, clr_red
    stosb
    cs mov  al, clr_grn
    stosb
    cs mov  al, clr_blu
    stosb
    inc     dx
    loop    l0
    ret

btn_type_pal_cb:
    call    pb_hide
    bk_new  BANK_TYPE_PAL, 1, pal_block_init_cb
    call    btn_add_limit
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_type_snd_cb                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
snd_block_init_cb:
    ret

btn_type_snd_cb:
    call    pb_hide
    bk_new  BANK_TYPE_SND, 16, snd_block_init_cb
    call    btn_add_limit
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_type_mod_cb                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
mod_block_init_cb:
    ret

btn_type_mod_cb:
    call    pb_hide
    bk_new  BANK_TYPE_MOD, 16, mod_block_init_cb
    call    btn_add_limit
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ btn_exit_cb                                       ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_exit_cb:
    jmp     exit_cb

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ tm_fps                                            ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
tm_fps:
    tm_clr
    s$_dec2 frame_rate, fps
    cs mov  fps, 0
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ _tb_tab_draw                                      ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
_tb_tab_draw:
    push    bp
    mov     bp, sp
    mov     ax, [bp + 4]
    mov     bx, [bp + 6]
    pop     bp
    add     al, bank_start_idx
    cmp     al, selected_tb
    setz    al
    mov     dx, 1 by 0  ; dark blue background
    cmp     al, 1
    jnz     >l0
    mov     dx, 9 by 0  ; purple-ish background
l0: inc     bh
    vg_fbox bx, 45 by 9, dx
    vg_hl   bx, 45, 0 by 0
    dec     bh
    inc     bl
    vg_vl   bx, 9, 0 by 0
    add     bh, 2
    add     bl, 2
    mov     dx, 8 by 0
    cmp     al, 1
    jnz     >l1
    mov     dx, 7 by 0
l1: es mov  al, md_id
    s$_dec2 tab_label, al
    es mov  al, md_type
    dec     al
    xlatw   al, type_name_lookup
    s$_cpy  tab_label + 3, si, 4
    vg_str  micro_font, tab_label, bx, dx, 1
    add     bh, 44
    sub     bl, 2
    vg_vl   bx, 9, 0 by 0
    ret

tb_draw macro
    push    bp, ax, bx, cx, dx
    push    #1, #2
    call    _tb_tab_draw
    add     sp, 4
    pop     dx, cx, bx, ax, bp
#em

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ _tb_bar_draw                                      ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
_tb_bar_draw:
    vg_hl   TAB_BAR_X by TAB_BAR_Y - 1, 218, 0 by 0
    vg_fbox TAB_BAR_X by TAB_BAR_Y, 218 by TAB_BAR_H,8 by 0
    vg_hl   TAB_BAR_X by TAB_BAR_B, 218, 0 by 0
    vg_str  micro_font, banks_label, 2 by TAB_BAR_Y + 3, 7 by 0, 1
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ _tb_tabs_draw                                     ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
_tb_tabs_draw:
    cs cmp  bank_hdrs_off, 5 * type bank_block
    jb      >l0
    bt_set  btn_bank_prev, F_BTN_TXTONLY or F_BTN_VISIBLE or F_BTN_ENABLED
    bt_set  btn_bank_next, F_BTN_TXTONLY or F_BTN_VISIBLE or F_BTN_ENABLED
l0: bk_ptr  0
    mov     bp, bank_start_off
    mov     ax, 1
    mov     bh, TAB_BAR_X + 10
    mov     bl, TAB_BAR_Y + 1
    mov     cx, 4
l1: es cmp  md_id, 0
    jz      >l2
    tb_draw bx, ax
    inc     ax
    add     bh, 50
    add     bp, type bank_block
    loop    l1
l2: ret

tb_tabs macro
    push    es, ax, cx, bx
    call    _tb_bar_draw
    call    _tb_tabs_draw
    pop     bx, cx, ax, es
#em

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ snd_viewer_cb                                     ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
snd_viewer_cb:
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ mod_viewer_cb                                     ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
mod_viewer_cb:
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ bg_viewer_cb                                      ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bg_viewer_cb:
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ font_viewer_cb                                    ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
font_viewer_cb:
    push    ds, es, bp, ax, bx, cx, dx
    te_shell
    tb_blk
    bl_ptr  block_idx
    mov     ds, es
    mov     si, bp
    add     si, 5
    mov     al, 0
    mov     dx, 5
    mov     bh, TAB_BAR_X + 4
    mov     bl, TAB_BAR_Y + 26
l0: cmp     dx, 1
    je      >l3
    mov     cx, 29
    jmp     >l1
l3: mov     cx, 12
l1: push    es, si, ax, bx, cx, dx
    push    3 by 6, bx
    cs call tile_draw
    add     sp, 4
    pop     dx, cx, bx, ax, si, es
    cs cmp  al, glyph_idx
    jne     >l2
    push    bx
    dec     bh
    dec     bl
    vg_box  bx, 7 by 7, 7 by 0
    pop     bx
    push    si
    te_draw
    pop     si
l2: add     si, 3 * 6
    inc     al
    add     bh, 7
    loop    l1
    add     bl, 7
    mov     bh, TAB_BAR_X + 4
    dec     dx
    cmp     dx, 0
    jnz     l0
    pop     dx, cx, bx, ax, bp, es, ds
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ pal_viewer_cb                                     ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
pal_col_draw:
    mov     cx, 8
l0: vg_fbox bx, 32 by 16, dx
    vg_box  bx, 32 by 15, 0 by 0
    push    bx
    sub     bh, 16
    add     bl, 5
    s$_dec2 palette_number, dh
    vg_str  micro_font, palette_number, bx, 7 by 0, 1
    pop     bx
    inc     dh
    add     bl, 17
    loop    l0
    ret

pal_viewer_cb:
    mov     dh, 0
    mov     dl, palette_idx
    mov     bh, 60
    mov     bl, 20
    call    pal_col_draw
    mov     bh, 180
    mov     bl, 20
    call    pal_col_draw

    ; draws the palettes in the block
    mov     ax, 0
    mov     dx, 2
    mov     bh, TAB_BAR_X + 6
    mov     bl, TAB_BAR_Y + 30
l0: mov     cx, 8
l1: vg_fbox bx, 24 by 24, 4 by 0
    s$_dec2 palette_number, al
    cmp     al, palette_idx
    jne     >l2
    push    bx
    dec     bh
    dec     bl
    vg_box  bx, 25 by 25, 7 by 0
    pop     bx
l2: inc     ax
    push    bx
    add     bh, 6
    add     bl, 10
    vg_str  micro_font, palette_number, bx, 7 by 0, 1
    pop     bx
    add     bh, 25
    loop    l1
    dec     dx
    add     bl, 25
    mov     bh, TAB_BAR_X + 6
    cmp     dx, 0
    je      >l3
    jmp     l0
l3: ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ tile_viewer_cb                                    ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
tile_viewer_cb:
    push    ds, es, bp, ax, bx, cx, dx
    te_shell
    tb_blk
    bl_ptr  block_idx
    mov     ds, es
    mov     si, bp
    add     si, 5
    mov     al, 0
    mov     dx, 6
    mov     bh, TAB_BAR_X + 4
    mov     bl, TAB_BAR_Y + 26
l0: cmp     dx, 1
    je      >l3
    mov     cx, 22
    jmp     >l1
l3: mov     cx, 17
l1: push    es, si, ax, bx, cx, dx
    push    TILE_WIDTH by TILE_LINES, bx
    cs call tile_draw
    add     sp, 4
    pop     dx, cx, bx, ax, si, es
    cs cmp  al, tile_idx
    jne     >l2
    push    bx
    dec     bh
    dec     bl
    vg_box  bx, 9 by 9, 7 by 0
    pop     bx
    push    si
    te_draw
    pop     si
l2: add     si, TILE_WIDTH * TILE_LINES
    inc     al
    add     bh, 9
    loop    l1
    add     bl, 9
    mov     bh, TAB_BAR_X + 4
    dec     dx
    cmp     dx, 0
    jnz     l0
    pop     dx, cx, bx, ax, bp, es, ds
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ spr_viewer_cb                                     ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
spr_viewer_cb:
    push    ds, es, bp, ax, bx, cx, dx
    te_shell
    tb_blk
    bl_ptr  block_idx
    mov     ds, es
    mov     si, bp
    add     si, 5
    mov     al, 0
    mov     dx, 3
    mov     bh, TAB_BAR_X + 4
    mov     bl, TAB_BAR_Y + 28
l0: cmp     dx, 1
    je      >l3
    mov     cx, 12
    jmp     >l1
l3: mov     cx, 7
l1: push    es, si, ax, bx, cx, dx
    push    SPR_WIDTH by SPR_LINES, bx
    cs call tile_draw
    add     sp, 4
    pop     dx, cx, bx, ax, si, es
    cs cmp  al, sprite_idx
    jne     >l2
    push    bx
    dec     bh
    dec     bl
    vg_box  bx, 17 by 17, 7 by 0
    pop     bx
    push    si
    te_draw
    pop     si
l2: add     si, SPR_WIDTH * SPR_LINES
    inc     al
    add     bh, 17
    loop    l1
    dec     dx
    add     bl, 17
    mov     bh, TAB_BAR_X + 4
    cmp     dx, 0
    jnz     l0
    pop     dx, cx, bx, ax, bp, es, ds
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ _tb_viewer_draw                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
_tb_viewer_draw:
    vg_str  micro_font, block_label, TAB_BAR_X + 4 by TAB_BAR_Y + 14, 7 by 0, 1
    vg_str  micro_font, block_number, TAB_BAR_X + 48 by TAB_BAR_Y + 14, 7 by 0, 1
    vg_str  micro_font, of_label, TAB_BAR_X + 66 by TAB_BAR_Y + 14, 7 by 0, 1
    vg_str  micro_font, block_total_number, TAB_BAR_X + 84 by TAB_BAR_Y + 14, 7 by 0, 1
    mov     bx, viewer_cb
    cmp     w[bx], 0
    jz      >l0
    call    [bx]
l0: ret

tb_vwr macro
    push    bx
    call    _tb_viewer_draw
    pop     bx
#em

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ _pb_draw                                          ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
_pb_draw:
    vg_fbox PB_X by PB_Y, 35 by 85, 8 by 0
    vg_box  PB_X by PB_Y, 35 by 85, 0 by 0
    vg_fbox PB_X + 2 by PB_Y + 2, 32 by 7,  9 by 0
    vg_str  micro_font, pick_type_title, PB_X + 6 by PB_Y + 3, 7 by 0, 1
    ret

pb_draw macro
    call    _pb_draw
#em

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ base_draw                                         ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
base_draw:
    vg_fbox 0 by 0, 38 by 256, 8 by 0
    vg_vl   38 by 0, 256, 0 by 0

    vg_str  micro_font, tool_title, 1 by 2, 0 by 0, 1
    vg_str  micro_font, tool_title, 2 by 3, 7 by 0, 1

    vg_str  micro_font, tool_version, 16 by 8, 0 by 0, 0
    vg_str  micro_font, tool_version, 17 by 9, 7 by 0, 0

    vg_str  micro_font, file_label, 42 by 2, 7 by 0, 1

    tb_tabs
    tb_vwr

    cmp     b pb_draw_flag, 1
    jnz     >l0
    pb_draw

l0: ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ draw                                              ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
draw:
    vg_clr
    call    base_draw
    tf_draw text_fields
    cu_draw
    mb_draw
    bt_draw buttons
    mo_draw mouse_data, cursor_pointer2
#if DEBUG
    vg_str  micro_font, frame_rate, 2 by 250, 0 by 0, 1


    st_top
    s$_dec2 state_number, st_code
    vg_str  micro_font, state_number, 2 by 240, 0 by 0, 1


    vg_str  micro_font, temp_number1, 42 by 246, 0 by 0, 1
    vg_str  micro_font, temp_number2, 62 by 246, 0 by 0, 1
    vg_str  micro_font, temp_number3, 82 by 246, 0 by 0, 1
#endif
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ show                                              ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
show:
    vg_flip
    cs inc  fps
    cs cmp  fps, 99
    ja      >l1
    ret
l1: cs mov  fps, 99
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ allocate                                          ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
allocate:
    mm_resv SZ_CTRL_RAM / 16,  offset ctrl_ram_ptr
    mm_set  ctrl_ram_ptr, 0, SZ_CTRL_RAM, 0
    mm_resv SZ_VRAM / 16, offset back_buffer_ptr
    mm_set  back_buffer_ptr, 0, SZ_VRAM, 0
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ tm_bk_scroll                                      ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
tm_bk_scroll:
    tm_clr
    cmp     bank_next_flag, 1
    jz      >l0
    cmp     bank_prev_flag, 1
    jz      >l1
    ret
l0: call    bank_next
    jmp     >l2
l1: call    bank_prev
l2: mov     bank_next_flag, 0
    mov     bank_prev_flag, 0
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ init                                              ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
init:
    mm_init
    call    allocate
    call    bk_init
    call    vg_init
    call    mo_init
    call    io_init
    call    tm_init
    call    cu_init
    tm_new  tm_fps, 60
    tm_new  tm_bk_scroll, 6
    st_push base_state
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ update                                            ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
update:
    tm_fire
    mo_read mouse_data
    st_top
    call    [st_callback]
    cmp     al, 1
    je      >p1
    cmp     al, 2
    je      >p2
p0: key
    cmp     al, 0
    je      >p1
    cmp     al, K_ESC
    je      >p2
p1: ret
p2: jmp     exit_cb

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ start                                             ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
start:
    call    init

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ tool_loop                                         ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
tool_loop:
    call    update
    call    draw
    call    show
    jmp     tool_loop
