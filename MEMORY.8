;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё lumberjacks                                       Ё
;цддддддддддддддддддддддддддддддддддддддддддддддддддд╢
;Ё                                                   Ё
;Ё copyright (C) 2017 jeff panici                    Ё
;Ё https://nybbles.io                                Ё
;Ё                                                   Ё
;Ё                                                   Ё
;Ё                                                   Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды

;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё structures                                        Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды
struc [bp]
                    dw  ?
    alloc_para_n    dw  ?
    alloc_seg_var   dw  ?
ends

struc [bp]
                    dw  ?
    memset_seg      dw  ?
    memset_offset   dw  ?
    memset_size     dw  ?
    memset_value    dw  ?
ends

;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё variables                                         Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды
start_seg_addr  dw  ?
free_seg_addr   dw  ?

;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё _mm_init                                          Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды
_mm_init:
    mov     free_seg_addr, ds
    add     free_seg_addr, (64 * 1024) / 16
    mov     ax, free_seg_addr
    mov     start_seg_addr, ax
    ret

mm_init macro
    push    ax
    call    _mm_init
    pop     ax
#em

;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё _mm_clr                                           Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды
_mm_clr:
    mov     ax, start_seg_addr
    mov     free_seg_addr, ax
    ret

mm_clr macro
    push    ax
    call    _mm_clr
    pop     ax
#em

;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё _alloc                                            Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды
_alloc:
    mov     bp, sp
    mov     ax, free_seg_addr
    add     ax, alloc_para_n
    mov     free_seg_addr, ax
    mov     di, alloc_seg_var
    mov     [di], ax
    ret

mm_resv macro
    push    bp, ax, bx, di, #2, #1
    call    _alloc
    add     sp, 4
    pop     di, bx, ax, bp
#em

;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё _memset                                           Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды
_memset:
    mov     bp, sp
    mov     es, memset_seg
    mov     di, memset_offset
    mov     cx, memset_size
    mov     ax, memset_value
    es rep  stosb
    ret

mm_set macro
    push    es, bp, ax, cx, di
    push    #4, #3, #2, #1
    call    _memset
    add     sp, 8
    pop     di, cx, ax, bp, es
#em
