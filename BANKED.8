;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ banked                                            ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³ copyright (C) 2017 jeff panici                    ³
;³ https://nybbles.io                                ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

code segment
    jmp     start

include constant.8
include macro.8
include string.8
include file.8
include control.8
include memory.8
include io.8
include input.8
include bank.8
include timer.8
include vga.8
include video.8
include mouse.8
include sound.8

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ editor constants                                  ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

STATE_NO_FILE   equ 1
STATE_NEW_FILE  equ 2
STATE_LOAD_FILE equ 3
STATE_NO_BANK   equ 4
STATE_SPR_BANK  equ 5
STATE_TILE_BANK equ 6
STATE_PAL_BANK  equ 7
STATE_BG_BANK   equ 8

F_BTN_NONE      equ 0000_0000_0000_0000xb
F_BTN_ENABLED   equ 0000_0000_0000_0001xb
F_BTN_END       equ 1000_0000_0000_0000xb

F_TXT_NONE      equ 0000_0000xb
F_TXT_READONLY  equ 0000_0001xb
F_TXT_EDIT      equ 0000_0010xb
F_TXT_END       equ 1000_0000xb

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ editor structures & variables                     ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

state_action struc [bp]
    state_code      db ?
    state_callback  dw ?
ends

state_def macro
    db #1
    dw #2
#em

valid_key struc [bp]
    vk_code     db ?
    vk_mod_code db ?
    vk_ascii    db ?
    vk_pad1     db ?
ends

valid_key_def macro
    db #1, #2, #3, 0
#em

text_field struc [bp]
    txt_flags       db ?
    txt_char_idx    db ?
    txt_buffer      dw ?
    txt_pos         dw ?
    txt_keys        dw ?
    txt_callback    dw ?
ends

text_field_def macro
    db #1, 0
    dw #2, #3, #4, #5
#em

button struc [bp]
    btn_flags   dw ?
    btn_txt     dw ?
    btn_txt_pos dw ?
    btn_pos     dw ?
    btn_size    dw ?
    btn_func    dw ?
ends

buttondef macro
    dw #1, #2, #3, #4, #5, #6
#em

even

exit_code           db      ?
temp_ptr            dw      ?
fps                 db      ?
caret_vis           db      ?
caret_pos           dw      ?
caret_enabled       db      0
draw_flag           db      ?
mouse_data          dw      2 dup (?)

frame_rate:         strdef  '00'
file_label:         strdef  'BANK FILE:'
editor_label:       strdef  'EDITOR:'
banks_label:        strdef  'BANKS:'
new_label:          strdef  'NEW'
load_label:         strdef  'LOAD'
save_label:         strdef  'SAVE'
exit_label:         strdef  'EXIT'
add_label:          strdef  'ADD'
remove_label:       strdef  'REMOVE'
clear_label:        strdef  'CLEAR'
tool_title:         strdef  'BANKED'
tool_version:       strdef  'v1.0'
tool_author:        strdef  'JEFF PANICI'
tool_copyright:     strdef  '(C) 2017 NYBBLES.IO'

buttons:
btn_new:            buttondef F_BTN_ENABLED, new_label,    8 by 23,  0 by 20,  38 by 10, btn_new_cb
btn_load:           buttondef F_BTN_ENABLED, load_label,   7 by 35,  0 by 32,  38 by 10, btn_load_cb
btn_save:           buttondef F_BTN_NONE,    save_label,   7 by 47,  0 by 44,  38 by 10, btn_save_cb
btn_exit:           buttondef F_BTN_ENABLED, exit_label,   7 by 59,  0 by 56,  38 by 10, btn_exit_cb
btn_add:            buttondef F_BTN_NONE,    add_label,   10 by 203, 0 by 200, 38 by 10, btn_add_bank_cb
btn_remove:         buttondef F_BTN_NONE,    remove_label, 2 by 215, 0 by 212, 38 by 10, btn_remove_bank_cb
btn_clear:          buttondef F_BTN_NONE,    clear_label,  5 by 227, 0 by 224, 38 by 10, btn_clear_bank_cb
                    buttondef F_BTN_END,     0,            0,        0,        0

input_events:
quit_key_evt:       def_inp_evt     T_INPUT_KEY, K_ESC

                    def_inp_evt     0,           0

input_bindings:
quit_bind:          def_inp_bind    B_QUIT,     'QUIT            ', exit_cb,   quit_key_evt,     0,                0, 0

                    def_inp_bind    0,          '                ', 0,         0,                0,                0, 0

valid_fname_keys:
    valid_key_def   002h,    0,  '1'
    valid_key_def   003h,    0,  '2'
    valid_key_def   004h,    0,  '3'
    valid_key_def   005h,    0,  '4'
    valid_key_def   006h,    0,  '5'
    valid_key_def   007h,    0,  '6'
    valid_key_def   008h,    0,  '7'
    valid_key_def   009h,    0,  '8'
    valid_key_def   00ah,    0,  '9'
    valid_key_def   00bh,    0,  '0'
    valid_key_def   01eh,    0,  'A'
    valid_key_def   030h,    0,  'B'
    valid_key_def   02eh,    0,  'C'
    valid_key_def   020h,    0,  'D'
    valid_key_def   012h,    0,  'E'
    valid_key_def   021h,    0,  'F'
    valid_key_def   022h,    0,  'G'
    valid_key_def   023h,    0,  'H'
    valid_key_def   017h,    0,  'I'
    valid_key_def   024h,    0,  'J'
    valid_key_def   025h,    0,  'K'
    valid_key_def   026h,    0,  'L'
    valid_key_def   032h,    0,  'M'
    valid_key_def   031h,    0,  'N'
    valid_key_def   018h,    0,  'O'
    valid_key_def   019h,    0,  'P'
    valid_key_def   010h,    0,  'Q'
    valid_key_def   013h,    0,  'R'
    valid_key_def   01fh,    0,  'S'
    valid_key_def   014h,    0,  'T'
    valid_key_def   016h,    0,  'U'
    valid_key_def   02fh,    0,  'V'
    valid_key_def   011h,    0,  'W'
    valid_key_def   02dh,    0,  'X'
    valid_key_def   015h,    0,  'Y'
    valid_key_def   02ch,    0,  'Z'
    valid_key_def   034h,    0,  '.'
    valid_key_def   00ch,    0,  '-'
    valid_key_def   00ch, 02ah,  '_'
    valid_key_def   0,       0,   0

valid_hex_keys:
    valid_key_def   002h,   0,  '1'
    valid_key_def   003h,   0,  '2'
    valid_key_def   004h,   0,  '3'
    valid_key_def   005h,   0,  '4'
    valid_key_def   006h,   0,  '5'
    valid_key_def   007h,   0,  '6'
    valid_key_def   008h,   0,  '7'
    valid_key_def   009h,   0,  '8'
    valid_key_def   00ah,   0,  '9'
    valid_key_def   00bh,   0,  '0'
    valid_key_def   01eh,   0,  'A'
    valid_key_def   030h,   0,  'B'
    valid_key_def   02eh,   0,  'C'
    valid_key_def   020h,   0,  'D'
    valid_key_def   012h,   0,  'E'
    valid_key_def   021h,   0,  'F'
    valid_key_def   0,      0,   0

valid_dec_keys:
    valid_key_def   002h,   0,  '1'
    valid_key_def   003h,   0,  '2'
    valid_key_def   004h,   0,  '3'
    valid_key_def   005h,   0,  '4'
    valid_key_def   006h,   0,  '5'
    valid_key_def   007h,   0,  '6'
    valid_key_def   008h,   0,  '7'
    valid_key_def   009h,   0,  '8'
    valid_key_def   00ah,   0,  '9'
    valid_key_def   00bh,   0,  '0'
    valid_key_def   0,      0,   0

text_fields:
bank_file_field:
    text_field_def  F_TXT_READONLY, bank_filename, 42 by 10, valid_fname_keys, file_name_cb

    text_field_def  F_TXT_END,                  0,        0,                0,            0

no_file_state:      state_def       STATE_NO_FILE,   no_file_cb
new_file_state:     state_def       STATE_NEW_FILE,  new_file_cb
load_file_state:    state_def       STATE_LOAD_FILE, load_file_cb

no_bank_state:      state_def       STATE_NO_BANK,   no_bank_cb
tile_bank_state:    state_def       STATE_TILE_BANK, tile_bank_cb
spr_bank_state:     state_def       STATE_SPR_BANK,  spr_bank_cb

current_state       dw no_file_state

bank_filename:      filename        'lumberja.bnk'

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ state machine callbacks                           ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
no_file_cb:
    call    fire_buttons
    ret

new_file_cb:
    call    update_text_fields
    mov     al, 1
    ret

load_file_cb:
    call    update_text_fields
    ret

file_name_cb:
    ; bp points at text field
    ; ax = 1 if RETURN or 0 if ESC

    ; process data from text field buffer
    ret

no_bank_cb:
    ret

tile_bank_cb:
    ret

spr_bank_cb:
    frect   17 by 43, 144 by 144, 8 by 0
    rect    42 by 16, 146 by 145, 0 by 0
    ret

exit_cb:
    call    reset_timer_isr
    call    reset_keyboard_isr
    mode_03
    mov     ah, 04ch
    mov     al, exit_code
    int     21h
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ text field functions                              ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
find_key_field:
    mov     bp, text_fields
l0: mov     al, txt_flags
    test    al, F_TXT_END
    jnz     >l1
    mov     al, txt_flags
    test    al, F_TXT_EDIT
    jz      l0
    ret
l1: mov     bp, 0
    ret

clamp_char_idx:
    mov     al, 0
    cmp     bl, 0
    je      >l0
    push    bp
    mov     bp, txt_buffer
    mov     cl, b[bp]
    pop     bp
    cmp     bl, cl
    jge     >l1
    ret
l0: mov     al, 1
    ret
l1: mov     al, 2
    ret

text_field_escape:
    ret

text_field_return:
    ret

text_field_left:
    call    clamp_char_idx
    cmp     al, 1
    je      >l0
    dec     bl
    mov     b txt_char_idx, bl
l0: ret

text_field_right:
    call    clamp_char_idx
    cmp     al, 2
    je      >l0
    push    bp
    mov     bp, txt_buffer
    inc     bp
    add     bp, bx
    mov     cl, b[bp]
    cmp     cl, 020h
    jne     >l1
    mov     al, 3
    pop     bp
    ret
l1: pop     bp
    inc     bl
    mov     b txt_char_idx, bl
l0: ret

text_field_home:
    mov     bl, 0
    mov     b txt_char_idx, bl
    ret

text_field_end:
l0: call    text_field_right
    cmp     al, 2
    jb      l0
    ret

text_field_backspace:
    call    clamp_char_idx
    cmp     al, 1
    je      >l0
    dec     bl
    mov     b txt_char_idx, bl
    call    text_field_delete
l0: ret

text_field_delete:
    call    clamp_char_idx
    cmp     al, 2
    je      >l1
    push    bp
    xor     cx, cx
    mov     bp, txt_buffer
    mov     cl, b[bp]
    inc     bp
    add     bp, bx
    inc     bp
    mov     si, bp
    dec     bp
    mov     di, bp
    sub     cl, bl
    cld
l0: mov     al, b[si]
    mov     b[di], al
    inc     si
    inc     di
    ;lodsb
    ;stosb
    loop    l0
    pop     bp
    push    bp
    mov     bp, txt_buffer
    mov     cl, b[bp]
    add     bp, cx
    mov     b[bp], 020h
    pop     bp
l1: ret

text_field_keys:
    push    bp
    mov     bp, txt_keys
l0: mov     dl, b vk_ascii
    mov     cl, b vk_code
    cmp     cl, 0
    je      >l2
    cmp     cl, al
    jne     >l1
    pop     bp
    call    clamp_char_idx
    cmp     al, 2
    je      >l3
    push    bp
    mov     bp, txt_buffer
    inc     bp
    add     bp, bx
    mov     b[bp], dl
    pop     bp
    inc     bl
    mov     b txt_char_idx, bl
    ret
l1: add     bp, type valid_key
    jmp     l0
l2: pop     bp
l3: ret

update_text_fields:
    call    find_key_field
    cmp     bp, 0
    jnz     >l0
    ret
l0: xor     ax, ax
    xor     bx, bx
    mov     bl, b txt_char_idx
l8: next_key
    cmp     al, 0
    je      >l1
    cmp     al, 0e0h
    je      l8
    cmp     al, K_ESC
    je      >l6
    cmp     al, K_ENTER
    je      >l7
    cmp     al, K_LEFT
    je      >l2
    cmp     al, K_RIGHT
    je      >l3
    cmp     al, K_BACKSPACE
    je      >l4
    cmp     al, K_DELETE
    je      >l5
    cmp     al, K_HOME
    je      >l9
    cmp     al, K_END
    je      >j0
    call    text_field_keys
    jmp     l0
l1: ret
l2: call    text_field_left
    ret
l3: call    text_field_right
    ret
l4: call    text_field_backspace
    ret
l5: call    text_field_delete
    ret
l6: call    text_field_escape
    ret
l7: call    text_field_return
    ret
l9: call    text_field_home
    ret
j0: call    text_field_end
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ button functions & callbacks                      ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
btn_new_cb:
    cs mov  current_state, new_file_state
    cs mov  bp, bank_file_field
    cs mov  txt_flags, F_TXT_EDIT
    xor     bl, bl
    push    bp
    cs mov  bp, txt_buffer
    mov     cl, b[bp]
    mov     bl, cl
    pop     bp
    mov     b txt_char_idx, bl
    cs mov  caret_enabled, 1
    ret

btn_load_cb:
    ret

btn_save_cb:
    ret

btn_add_bank_cb:
    ret

btn_remove_bank_cb:
    ret

btn_clear_bank_cb:
    ret

btn_exit_cb:
    jmp     exit_cb

fire_buttons:
    cs mov  bp, mouse_data
    cs mov  bx, ms_pos
    cs mov  ax, ms_btn
    test    al, F_LEFT_MOUSE_BTN
    jnz     >l0
    ret
l0: cs mov  bp, buttons
l1: cs mov  ax, btn_flags
    test    ax, F_BTN_END
    jz      >l2
    ret
l2: test    ax, F_BTN_ENABLED
    jz      >l4
l3: cs mov  ax, btn_pos
    cs mov  cx, btn_size
    cs mov  dx, ax
    add     dx, cx
    cmp     bh, al
    jb      >l4
    cmp     bh, dl
    ja      >l4
    cmp     bl, ah
    jb      >l4
    cmp     bl, dh
    ja      >l4
    cmp     btn_func, 0
    jz      >l4
    cs call [btn_func]
l4: add     bp, type button
    jmp     l1
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ timer callbacks                                   ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
fps_timer:
    reset_timer
    mov     di, frame_rate + 1
    xor     ax, ax
    cs mov  al, fps
    call    put_dec2
    cs mov  fps, 0
    ret

caret_timer:
    reset_timer
    not     caret_vis
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ drawing functions                                 ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
draw_text_fields:
    push    bp, ax, bx, cx, dx
    mov     bp, text_fields
l0: xor     ax, ax
    mov     cx, 8 by 0
    mov     al, txt_flags
    test    al, F_TXT_END
    jnz     >l2
    mov     al, txt_flags
    test    al, F_TXT_EDIT
    jz      >l1
    mov     cx, 7 by 0
l1: mov     ax, txt_pos
    mov     bx, txt_buffer
    string  offset micro_font, bx, ax, cx, 1
    cmp     ch, 7
    jne     >l3
    mov     bx, ax
    xor     ax, ax
    xor     cx, cx
    mov     cl, 6
    mov     al, b txt_char_idx
    mul     cx
    add     bh, al
    mov     caret_pos, bx
l3: add     bp, type text_field
    jmp     l0
l2: pop     dx, cx, bx, ax, bp
    ret

draw_caret:
    cs cmp  caret_enabled, 1
    jnz     >l0
    cs mov  al, caret_vis
    cmp     al, 0
    jz      >l0
    cs mov  ax, caret_pos
    frect   ax, 5 by 5, 7 by 0
l0: ret

draw_base:
    frect   0 by 0, 38 by 256, 8 by 0
    vline   38 by 0, 256, 0 by 0

    string  offset micro_font, file_label,   42 by 2, 7 by 0, 1
    string  offset micro_font, editor_label,206 by 2, 7 by 0, 1

    string  offset micro_font, tool_title,  1 by 2, 0 by 0, 1
    string  offset micro_font, tool_title,  2 by 3, 7 by 0, 1

    string  offset micro_font, tool_version, 16 by 8, 0 by 0, 0
    string  offset micro_font, tool_version, 17 by 9, 7 by 0, 0

    hline   38 by 189, 218,     0 by 0
    frect   38 by 190, 218 by 9,8 by 0
    hline   38 by 198, 218,     0 by 0
    string  offset micro_font, banks_label, 4 by 191, 7 by 0, 1
    ret

draw_buttons:
    cs mov  bp, buttons
l0: cs mov  ax, btn_flags
    test    ax, F_BTN_END
    jz      >l1
    ret
l1: test    ax, F_BTN_ENABLED
    jz      >l3
l2: cs mov  ax, btn_pos
    cs mov  cx, btn_size
    xor     bx, bx
    mov     bl, ch
    frect   ax, cx, 9 by 0
    hline   ax, bx, 0 by 0
    cs mov  si, btn_txt
    cs mov  dx, btn_txt_pos
    string  offset micro_font, si, dx, 7 by 0, 1
    add     al, cl
    hline   ax, bx, 0 by 0
l3: add     bp, type button
    jmp     l0
    ret

draw:
    cs cmp  draw_flag, 1
    je      >l0
    ret

l0: cs mov  draw_flag, 0
    clear
    call    draw_base
    call    draw_text_fields
    call    draw_caret
    call    draw_buttons

l5:
#if DEBUG
    string  offset micro_font, frame_rate, 244 by 251, 0 by 0, 1
#endif
    mdraw   mouse_data, cursor_pointer2
    ret

show:
    is_vblank
    cmp     al, 0
    jnz     >l0
    ret
l0: flip
    wait_novblank
    ;update_input    input_events
    ;fire_bindings   input_bindings
    cs inc  fps
    cs mov  draw_flag, 1
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ main tool engine                                  ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
allocate:
    alloc   SZ_CTRL_RAM / 16,  offset ctrl_ram_ptr
    memset  ctrl_ram_ptr, 0, SZ_CTRL_RAM, 0

    mov     es, ctrl_ram_ptr
    mov     bp, 0

    alloc   SZ_TILE_BANK / 16, offset temp_ptr
    memset  temp_ptr, 0, SZ_TILE_BANK, 024h
    es_movm c_bg_tiles, temp_ptr

    alloc   SZ_TILE_BANK / 16, offset temp_ptr
    memset  temp_ptr,   0, SZ_TILE_BANK, 07fh
    es_movm c_spr_tiles, temp_ptr

    alloc   SZ_VRAM / 16, offset back_buffer_ptr
    memset  back_buffer_ptr, 0, SZ_VRAM, 0

    ret

init:
    call    allocate
    call    bank_init
    mode_13
    mode_p  modeq_params
    call    mouse_init
    call    init_keyboard_isr
    call    init_timer_isr

    timer   offset fps_timer, 60
    timer   offset caret_timer, 25

    ret

update:
    fire_timers
    mread   mouse_data
    cs mov  bp, [current_state]
    cs call [state_callback]
    cmp     al, 1
    je      >p1
p0: next_key
    cmp     al, 0
    je      >p1
    cmp     al, K_ESC
    je      >p2
p1: ret
p2: jmp     exit_cb

;
; entry point
;
start:
    call    init

;
; the heart
;
tool_loop:
    cs call update
    cs call draw
    cs call show
    jmp     tool_loop
    jmp     exit_cb
