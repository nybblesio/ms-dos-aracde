;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ lumberjacks                                       ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³ copyright (C) 2017 jeff panici                    ³
;³ https://nybbles.io                                ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ constants                                         ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
J_CTL_PORT      equ 0201h
J_MASK_BTN_1    equ 010h
J_MASK_BTN_2    equ 020h
J_MASK_BTN_3    equ 040h
J_MASK_BTN_4    equ 080h

K_ESC           equ 01h
K_BACKSPACE     equ 0eh
K_DELETE        equ 053h
K_ENTER         equ 01ch
K_HOME          equ 047h
K_END           equ 04fh
K_CTRL          equ 01dh
K_A             equ 01eh
K_S             equ 01fh
K_D             equ 020h
K_W             equ 011h
K_LSHIFT        equ 02ah
K_RSHIFT        equ 036h
K_LALT          equ 038h
K_SPACE         equ 039h
K_UP            equ 048h
K_LEFT          equ 04bh
K_RIGHT         equ 04dh
K_DOWN          equ 050h
K_ESCAPE1       equ 0e0h
K_ESCAPE2       equ 0e1h
K_PAGEDOWN      equ 051h
K_PAGEUP        equ 049h
K_RBRACKET      equ 01bh
K_LBRACKET      equ 01ah
K_0             equ 00bh
K_1             equ 002h
K_2             equ 003h
K_3             equ 004h
K_4             equ 005h
K_5             equ 006h
K_6             equ 007h
K_7             equ 008h
K_8             equ 009h
K_9             equ 00ah

T_INPUT_KEY     equ 1
T_INPUT_MOUSE   equ 2
T_INPUT_JOY     equ 3

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ structures                                        ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
input_event struc [bp]
    ie_type     db ?
    ie_input    db ?
    ie_state    dw ?
    ie_data1    dw ?
    ie_data2    dw ?
ends

in_evt macro
    db  #1, #2
    dw  0,  0,  0
#em

input_binding struc [bp]
    ib_code     db  ?
    ib_name     db  16 dup (?)
    ib_callback dw  ?
    ib_event1   dw  ?
    ib_event2   dw  ?
    ib_event3   dw  ?
    ib_event4   dw  ?
    ib_reserve  dw  ?
ends

in_bind macro
    db  #1
    db  #2
    dw  #3, #4, #5, #6, #7, 0
#em

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ variables                                         ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ _joy_buttons                                      ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
;_joy_buttons:
;    cli
;    mov     dx, J_CTL_PORT
;    xor     ax, ax
;    in      al, dx
;    mov     bl, al
;    and     bl, J_MASK_BTN_1
;    mov     input_j1_b1, bl
;    mov     bl, al
;    and     bl, J_MASK_BTN_2
;    mov     input_j1_b2, bl
;    mov     bl, al
;    and     bl, J_MASK_BTN_3
;    mov     input_j1_b3, bl
;    mov     bl, al
;    and     bl, J_MASK_BTN_4
;    mov     input_j1_b4, bl
;    sti
;    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ _in_update                                        ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
_in_update:
    mov     bp, sp
    mov     bp, bp[2]
p4: key
    cmp     al, 0
    je      >p3
    cmp     al, 0e0h
    je      p4
p0: cs cmp  ie_type, 0
    jz      >p3
    cs cmp  ie_type, T_INPUT_KEY
    jne     >p2
    cs mov  bl, ie_input
    cmp     al, bl
    jne     >p1
    cs mov  ie_state, 1
    ret
p1: add     bl, 080h
    cmp     al, bl
    jne     >p2
    cs mov  ie_state, 0
p2: add     bp, type input_event
    jmp     p0
p3: ret

in_upd macro
    push    ax, bx, bp
    push    #1
    cs call _in_update
    add     sp, 2
    pop     bp, bx, ax
#em

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ _in_fire_binds                                    ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
_in_fire_binds:
    mov     bp, sp
    mov     bp, bp[2]
f0: cs cmp  ib_code, 0
    je      >f4
    mov     si, bp
    add     si, offset ib_event1
    mov     cx, 4
f1: cs cmp  w[si], 0
    jz      >f3
    cs mov  di, [si]
    cs cmp  w[di+2], 1
    jne     >f2
    push    bp, si, cx
    cs call [ib_callback]
    pop     cx, si, bp
f2: add     si, 2
    loop    f1
f3: add     bp, type input_binding
    jmp     f0
f4: ret

in_fire macro
    push    ax, bx, cx, bp, si, di
    push    #1
    cs call _in_fire_binds
    add     sp, 2
    pop     di, si, bp, cx, bx, ax
#em
