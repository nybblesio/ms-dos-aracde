;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё lumberjacks                                       Ё
;цддддддддддддддддддддддддддддддддддддддддддддддддддд╢
;Ё                                                   Ё
;Ё copyright (C) 2017 jeff panici                    Ё
;Ё https://nybbles.io                                Ё
;Ё                                                   Ё
;Ё                                                   Ё
;Ё                                                   Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды

;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё video generator                                   Ё
;цддддддддддддддддддддддддддддддддддддддддддддддддддд╢
;Ё                                                   Ё
;Ё In this engine we use VGA mode 13h but tweaked    Ё
;Ё so that it's 256x256x256.  This is known as       Ё
;Ё Chained Mode Q.  Chained here means the VGA       Ё
;Ё acts as though it's a linear address space.       Ё
;Ё                                                   Ё
;Ё The downside to chained modes is we can only      Ё
;Ё "see" 65536 bytes of the VGA memory space, even   Ё
;Ё though it has more to offer (typically 256KB).    Ё
;Ё For this game, that's OK.                         Ё
;Ё                                                   Ё
;Ё We allocate a "back buffer" in conventional RAM   Ё
;Ё and all of the video generation functions operate Ё
;Ё on this buffer.  The flip function does the       Ё
;Ё copy from this buffer to the actual VRAM.         Ё
;Ё                                                   Ё
;Ё The video generator is simple:                    Ё
;Ё                                                   Ё
;Ё - (16) 16-color palettes.  The first 8 are for    Ё
;Ё   backgrounds and the second 8 are for            Ё
;Ё   sprites.  Palettes can be redefined during      Ё
;Ё   VBLANK using the VGA hardware.                  Ё
;Ё                                                   Ё
;Ё - One (or more) 64Kb banks of 8x8 background      Ё
;Ё   tiles.  Each tile can have one of 8 palettes    Ё
;Ё   and the palette can be changed at any time.     Ё
;Ё                                                   Ё
;Ё - Two backgrounds, 32x32 8x8 tiles in size.       Ё
;Ё   BG2 is drawn with a higher priority. Tiles      Ё
;Ё   in the BG2 map that are 0 are transparent.      Ё
;Ё   BG1 is drawn without transparency, BG2 with.    Ё
;Ё                                                   Ё
;Ё - Up to 256 16x16 sprites on-screen.  Each sprite Ё
;Ё   can be assigned one of 8 16-color palettes.     Ё
;Ё                                                   Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды

SPR_LINES   equ 16
SPR_WIDTH   equ 8
TILE_LINES  equ 8
TILE_WIDTH  equ 4

include font.8

;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё font_init                                         Ё
;цддддддддддддддддддддддддддддддддддддддддддддддддддд╢
;Ё this function uses the BIOS to grab the seg:off   Ё
;Ё for the 8x8 and 8x14 fonts for use in put_char.   Ё
;Ё                                                   Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды
font_init:
    mov     ax, 01130h
    mov     bx, 0300h
    int     10h

    mov     ax, bp
    mov     bp, offset small_font
    mov     f_segment, es
    mov     f_offset, ax
    mov     f_width, 8
    mov     f_height, 8
    mov     f_mask, 1000_0000xb

    mov     ax, 01130h
    mov     bx, 0200h
    int     10h

    mov     ax, bp
    mov     bp, offset large_font
    mov     f_segment, es
    mov     f_offset, ax
    mov     f_width, 8
    mov     f_height, 14
    mov     f_mask, 1000_0000xb

    mov     bp, offset micro_font
    mov     f_segment, cs
    mov     f_offset, offset micro_font_bits
    mov     f_width, 5
    mov     f_height, 5
    mov     f_mask, 0001_0000xb

    ret

;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё string generators                                 Ё
;цддддддддддддддддддддддддддддддддддддддддддддддддддд╢
;Ё                                                   Ё
;Ё                                                   Ё
;Ё                                                   Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды
_string:
    struc [bp]
                dw ?
        str_fnt dw ?
        str_ptr dw ?
        str_y   db ?
        str_x   db ?
        str_pal db ?
        str_clr db ?
        str_sbc db ?
        str_pad db ?
    ends

    mov     bp, sp
    mov     si, str_ptr
    xor     cx, cx
    cs mov  cl, b[si]
    cmp     cl, 0
    jnz     >c3
    ret
c3: inc     si
    mov     bh, str_y
    mov     bl, str_x
    mov     dl, str_pal
    shl     dl, 4
    add     dl, str_clr
    mov     dh, str_sbc
    mov     bp, str_fnt
    mov     ds, f_segment
    cs mov  es, back_buffer_ptr
s0: push    bx, cx, dx
    cs mov  al, [si]
    mul     f_height
    mov     di, f_offset
    add     di, ax
    mov     dh, f_width
    mov     ch, f_height
c0: mov     ah, f_mask
    ds mov  al, [di]
c1: mov     cl, al
    and     cl, ah
    jz      >c2
    es mov  [bx], dl
c2: inc     bl
    shr     ah, 1
    jne     c1
    inc     di
    inc     bh
    sub     bl, dh
    dec     ch
    jne     c0
    pop     dx, cx, bx
    inc     si
    cs add  bl, f_width
    add     bl, dh
    loop    s0
    ret

string macro
    push    bp, si, di, ax, bx, cx, dx
    push    #5, #4, #3, #2, #1
    call    _string
    add     sp, 10
    pop     dx, cx, bx, ax, di, si, bp
#em

;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё vram and back buffer                              Ё
;цддддддддддддддддддддддддддддддддддддддддддддддддддд╢
;Ё                                                   Ё
;Ё                                                   Ё
;Ё                                                   Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды
clear_page:
    cs mov  es, back_buffer_ptr
    mov     di, 0
    mov     cx, (SZ_VRAM / 2) + 2
    mov     ax, 07f7fh
    cld
    es rep  stosw
    ret

clear macro
    push    es, di, cx, ax
    call    clear_page
    pop     ax, cx, di, es
#em

copy_page:
    cs mov  ds, back_buffer_ptr
    mov     es, VRAM
    mov     si, 0
    mov     di, 0
    mov     cx, (SZ_VRAM / 2) + 2
    cld
l0: ds lodsw
    es stosw
    loop    l0
l1: ret

flip macro
    push    es, ds, si, di, cx, ax
    call    copy_page
    pop     ax, cx, di, si, ds, es
#em

;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё background generators                             Ё
;цддддддддддддддддддддддддддддддддддддддддддддддддддд╢
;Ё                                                   Ё
;Ё                                                   Ё
;Ё                                                   Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды
ldbg1 macro
    push    ax, bx
    cs mov  es, ctrl_ram_ptr
    mov     bp, 0
    es mov  ds, c_bg_tiles
    es mov  bp, offset c_bg1
    mov     ax, #1
    shl     ax, (type tile) / 2
    add     bp, ax
    es mov  ax, t_tile
    mov     bx, TILE_WIDTH * TILE_LINES
    mul     bx
    mov     si, ax
    pop     bx, ax
#em

_video_bg1:
    xor     di, di
    xor     bx, bx
    mov     ch, 32
    mov     cl, 32
l0: ldbg1   di

    push    bx, cx
    es mov  dl, t_pal
    shl     dl, 4
    cs mov  es, back_buffer_ptr
    mov     ch, TILE_LINES
    mov     cl, TILE_WIDTH
l1: ds mov  al, [si]
    aam     16
    add     ah, dl
    es mov  [bx], ah
    inc     bl
    add     al, dl
    es mov  [bx], al
    inc     bl
    inc     si
    dec     cl
    jnz     l1
    mov     cl, TILE_WIDTH
    inc     bh
    sub     bl, TILE_WIDTH * 2
    dec     ch
    jnz     l1
    pop     cx, bx

    inc     di
    add     bl, TILE_WIDTH * 2
    dec     cl
    jne     l0
    mov     bl, 0
    add     bh, TILE_LINES
    mov     cl, 32
    dec     ch
    jne     l0
    ret

video_bg1 macro
    push    es, ds, bp, ax, bx, cx, dx, si, di
    call    _video_bg1
    pop     di, si, dx, cx, bx, ax, bp, ds, es
#em

ldbg2 macro
    push    bx, dx
    cs mov  es, ctrl_ram_ptr
    mov     bp, 0
    es mov  ds, c_bg_tiles
    es mov  bp, offset c_bg2
    mov     ax, #1
    shl     ax, (type tile) / 2
    add     bp, ax
    es mov  ax, t_tile
    mov     bx, TILE_WIDTH * TILE_LINES
    mul     bx
    mov     si, ax
    pop     dx, bx
#em

_video_bg2:
    xor     di, di
    xor     bx, bx
    mov     ch, 32
    mov     cl, 32
l0: ldbg2   di
    es mov  ax, t_tile
    cmp     ax, 0
    jz      >l4
    push    bx, cx
    es mov  dl, t_pal
    shl     dl, 4
    cs mov  es, back_buffer_ptr
    mov     ch, TILE_LINES
    mov     cl, TILE_WIDTH
l1: ds mov  al, [si]
    aam     16
    cmp     ah, 0
    jz      >l2
    add     ah, dl
    es mov  [bx], ah
l2: inc     bl
    cmp     al, 0
    jz      >l3
    add     al, dl
    es mov  [bx], al
l3: inc     bl
    inc     si
    dec     cl
    jnz     l1
    mov     cl, TILE_WIDTH
    inc     bh
    sub     bl, TILE_WIDTH * 2
    dec     ch
    jnz     l1
    pop     cx, bx
l4: inc     di
    add     bl, TILE_WIDTH * 2
    dec     cl
    jz      >l5
    jmp     l0
l5: mov     bl, 0
    add     bh, TILE_LINES
    mov     cl, 32
    dec     ch
    jz      >l6
    jmp     l0
l6: ret

video_bg2 macro
    push    es, ds, bp, ax, bx, cx, dx, si, di
    call    _video_bg2
    pop     di, si, dx, cx, bx, ax, bp, ds, es
#em

;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё sprite generators                                 Ё
;цддддддддддддддддддддддддддддддддддддддддддддддддддд╢
;Ё                                                   Ё
;Ё                                                   Ё
;Ё                                                   Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды

loadspr macro
    push    cx, dx
    cs mov  es, ctrl_ram_ptr
    mov     bp, 0
    es mov  ds, c_spr_tiles
    es mov  bp, offset c_sprs
    mov     ax, #1
    shl     ax, (type sprite) / 2
    add     bp, ax
    es mov  ax, s_tile
    mov     bx, SPR_WIDTH * SPR_LINES
    mul     bx
    mov     si, ax
    pop     dx, cx
#em

setspr macro
    es mov  s_tile, #1
    es mov  s_pal, #2
    es mov  s_y, #3
    es mov  s_x, #4
    es mov  s_flags, #5
    es mov  s_user, #6
#em

_video_fg:
    mov     cx, 0ffh
l0: loadspr cx
    es mov  al, s_flags
    test    al, F_SPR_ENABLED
    jz      >l4
    es mov  dl, s_pal
    shl     dl, 4
    add     dl, 128
    es mov  bh, s_y
    es mov  bl, s_x
    push    cx
    cs mov  es, back_buffer_ptr
    mov     ch, SPR_LINES
    mov     cl, SPR_WIDTH
l1: ds mov  al, [si]
    aam     16
    cmp     ah, 0
    jz      >l2
    add     ah, dl
    es mov  [bx], ah
l2: inc     bl
    cmp     al, 0
    jz      >l3
    add     al, dl
    es mov  [bx], al
l3: inc     bl
    inc     si
    dec     cl
    jnz     l1
    mov     cl, SPR_WIDTH
    inc     bh
    sub     bl, SPR_WIDTH * 2
    dec     ch
    jnz     l1
    pop     cx
l4: cmp     cx, 0
    jz      >l5
    dec     cx
    jmp     l0
l5: ret

video_fg macro
    push    es, ds, bp, ax, bx, cx, dx, si, di
    call    _video_fg
    pop     di, si, dx, cx, bx, ax, bp, ds, es
#em

;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё put_pixel                                         Ё
;цддддддддддддддддддддддддддддддддддддддддддддддддддд╢
;Ё                                                   Ё
;Ё                                                   Ё
;Ё                                                   Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды
put_pixel:
    struc [bp]
                dw ?
        pix_y   db ?
        pix_x   db ?
        pix_pal db ?
        pix_clr db ?
    ends

    mov     ah, pix_y
    mov     al, pix_x
    mov     di, ax
    cs mov  es, back_buffer_ptr
    es mov  [di], cl
    ret

pixel macro
    push    bp, ax, cx, di, es
    push    #2, #1
    call    put_pixel
    add     sp, 4
    pop     es, di, cx, ax, bp
#em

;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё hline & vline                                     Ё
;цддддддддддддддддддддддддддддддддддддддддддддддддддд╢
;Ё                                                   Ё
;Ё                                                   Ё
;Ё                                                   Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды
_hline:
    struc [bp]
                dw ?
        hl_y    db ?
        hl_x    db ?
        hl_w    dw ?
        hl_pal  db ?
        hl_clr  db ?
    ends
    mov     bp, sp
    mov     bl, hl_pal
    shl     bl, 4
    add     bl, hl_clr
    mov     ah, hl_y
    mov     al, hl_x
    mov     cx, hl_w
    cs mov  es, back_buffer_ptr
l0: mov     di, ax
    es mov  [di], bl
    inc     al
    loop    l0
    ret

hline macro
    push    es, bp, ax, bx, cx, di
    push    #3, #2, #1
    call    _hline
    add     sp, 6
    pop     di, cx, bx, ax, bp, es
#em

_vline:
    struc [bp]
                dw ?
        vl_y    db ?
        vl_x    db ?
        vl_h    dw ?
        vl_pal  db ?
        vl_clr  db ?
    ends
    mov     bp, sp
    mov     bl, vl_pal
    shl     bl, 4
    add     bl, vl_clr
    mov     ah, vl_y
    mov     al, vl_x
    mov     cx, vl_h
    cs mov  es, back_buffer_ptr
l0: mov     di, ax
    es mov  [di], bl
    inc     ah
    loop    l0
    ret

vline macro
    push    es, bp, ax, bx, cx, di
    push    #3, #2, #1
    call    _vline
    add     sp, 6
    pop     di, cx, bx, ax, bp, es
#em

;зддддддддддддддддддддддддддддддддддддддддддддддддддд©
;Ё rect & frect                                      Ё
;цддддддддддддддддддддддддддддддддддддддддддддддддддд╢
;Ё                                                   Ё
;Ё                                                   Ё
;Ё                                                   Ё
;юддддддддддддддддддддддддддддддддддддддддддддддддддды
_rect:
    struc [bp]
                dw ?
        r_y     db ?
        r_x     db ?
        r_h     db ?
        r_w     db ?
        r_pal   db ?
        r_clr   db ?
    ends

    mov     bp, sp
    xor     dx, dx
    mov     dl, r_pal
    shl     dl, 4
    add     dl, r_clr
    mov     bh, r_y
    mov     bl, r_x
    xor     cx, cx
    mov     cl, r_w
    inc     cl
    cs mov  es, back_buffer_ptr
l0: es mov  [bx], dl
    add     bh, r_h
    es mov  [bx], dl
    sub     bh, r_h
    inc     bl
    loop    l0

    mov     cl, r_h
    mov     bh, r_y
    mov     bl, r_x
l1: es mov  [bx], dl
    add     bl, r_w
    es mov  [bx], dl
    sub     bl, r_w
    inc     bh
    loop    l1

    ret

rect macro
    push    es, bp, ax, bx, cx, dx
    push    #3, #2, #1
    call    _rect
    add     sp, 6
    pop     dx, cx, bx, ax, bp, es
#em

_frect:
    struc [bp]
                dw ?
        fr_y    db ?
        fr_x    db ?
        fr_h    db ?
        fr_w    db ?
        fr_pal  db ?
        fr_clr  db ?
    ends

    mov     bp, sp
    mov     al, fr_pal
    shl     al, 4
    add     al, hl_clr
    mov     bh, fr_y
    mov     bl, fr_x
    mov     ch, fr_h
    mov     cl, fr_w
    cs mov  es, back_buffer_ptr
l0: es mov  [bx], al
    inc     bl
    dec     cl
    cmp     cl, 0
    jnz     l0
    mov     cl, fr_w
    sub     bl, cl
    inc     bh
    dec     ch
    cmp     ch, 0
    jnz     l0
    ret

frect macro
    push    bp, ax, bx, cx, dx
    push    #3, #2, #1
    call    _frect
    add     sp, 6
    pop     dx, cx, bx, ax, bp
#em

;
;
;

vg_init:
    mode_13
    mode_p  modeq_params
    ret

vg_shutdown:
    mode_03
    ret
