;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ banked                                            ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³ copyright (C) 2017 jeff panici                    ³
;³ https://nybbles.io                                ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ constants                                         ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
F_TXT_NONE      equ 0000_0000xb
F_TXT_READONLY  equ 0000_0001xb
F_TXT_EDIT      equ 0000_0010xb
F_TXT_END       equ 1000_0000xb

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ structures                                        ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
valid_key struc [bp]
    vk_code     db ?
    vk_mod_code db ?
    vk_ascii    db ?
    vk_pad1     db ?
ends

vk_def macro
    db #1, #2, #3, 0
#em

text_field struc [bp]
    txt_flags       db ?
    txt_char_idx    db ?
    txt_buffer      dw ?
    txt_pos         dw ?
    txt_keys        dw ?
    txt_callback    dw ?
ends

tf_def macro
    db #1, 0
    dw #2, #3, #4, #5
#em

tf_set macro
    push    bp
    mov     bp, #1
    mov     txt_flags, #2
    pop     bp
#em

tf_load macro
    mov     bp, #1
#em

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ txt_find_key                                      ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
_txt_find_key:
l0: mov     al, txt_flags
    test    al, F_TXT_END
    jnz     >l1
    mov     al, txt_flags
    test    al, F_TXT_EDIT
    jz      l0
    ret
l1: mov     bp, 0
    ret

tf_find macro
    mov     bp, #1
    call    _txt_find_key
#em

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ txt_clamp                                         ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
txt_clamp:
    mov     al, 0
    cmp     bl, 0
    je      >l0
    push    bp
    mov     bp, txt_buffer
    mov     cl, b[bp]
    pop     bp
    cmp     bl, cl
    jge     >l1
    ret
l0: mov     al, 1
    ret
l1: mov     al, 2
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ txt_escape                                        ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
txt_escape:
    mov     cl, F_TXT_READONLY
    mov     txt_flags, cl
    mov     al, 0
    cs call [txt_callback]
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ txt_return                                        ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
txt_return:
    mov     cl, F_TXT_READONLY
    mov     txt_flags, cl
    mov     al, 1
    cs call [txt_callback]
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ txt_left                                          ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
txt_left:
    call    txt_clamp
    cmp     al, 1
    je      >l0
    dec     bl
    mov     b txt_char_idx, bl
l0: ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ txt_right                                         ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
txt_right:
    call    txt_clamp
    cmp     al, 2
    je      >l0
    push    bp
    mov     bp, txt_buffer
    inc     bp
    add     bp, bx
    mov     cl, b[bp]
    cmp     cl, 020h
    jne     >l1
    mov     al, 3
    pop     bp
    ret
l1: pop     bp
    inc     bl
    mov     b txt_char_idx, bl
l0: ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ txt_home                                          ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
txt_home:
    mov     bl, 0
    mov     b txt_char_idx, bl
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ txt_end                                           ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
txt_end:
l0: call    txt_right
    cmp     al, 2
    jb      l0
    ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ txt_backspace                                     ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
txt_backspace:
    call    txt_clamp
    cmp     al, 1
    je      >l0
    dec     bl
    mov     b txt_char_idx, bl
    call    txt_delete
l0: ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ txt_delete                                        ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
txt_delete:
    call    txt_clamp
    cmp     al, 2
    je      >l1
    push    bp
    xor     cx, cx
    mov     bp, txt_buffer
    mov     cl, b[bp]
    inc     bp
    add     bp, bx
    inc     bp
    mov     si, bp
    dec     bp
    mov     di, bp
    sub     cl, bl
    push    es
    mov     es, cs
    cld
l0: movsb
    loop    l0
    pop     es
    pop     bp
    push    bp
    mov     bp, txt_buffer
    mov     cl, b[bp]
    add     bp, cx
    mov     b[bp], 020h
    pop     bp
l1: ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ _txt_keys                                         ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
_txt_keys:
    push    bp
    mov     bp, txt_keys
l0: mov     dl, b vk_ascii
    mov     cl, b vk_code
    cmp     cl, 0
    je      >l2
    cmp     cl, al
    jne     >l1
    pop     bp
    call    txt_clamp
    cmp     al, 2
    je      >l3
    push    bp
    mov     bp, txt_buffer
    inc     bp
    add     bp, bx
    mov     b[bp], dl
    pop     bp
    inc     bl
    mov     b txt_char_idx, bl
    ret
l1: add     bp, type valid_key
    jmp     l0
l2: pop     bp
l3: ret

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ _txt_upd                                          ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
_txt_upd:
    call    _txt_find_key
    cmp     bp, 0
    jnz     >l0
    ret
l0: xor     ax, ax
    xor     bx, bx
    mov     bl, b txt_char_idx
l8: key
    cmp     al, 0
    je      >l1
    cmp     al, 0e0h
    je      l8
    cmp     al, K_ESC
    je      >l6
    cmp     al, K_ENTER
    je      >l7
    cmp     al, K_LEFT
    je      >l2
    cmp     al, K_RIGHT
    je      >l3
    cmp     al, K_BACKSPACE
    je      >l4
    cmp     al, K_DELETE
    je      >l5
    cmp     al, K_HOME
    je      >l9
    cmp     al, K_END
    je      >j0
    call    _txt_keys
    jmp     l0
l1: ret
l2: call    txt_left
    ret
l3: call    txt_right
    ret
l4: call    txt_backspace
    ret
l5: call    txt_delete
    ret
l6: call    txt_escape
    ret
l7: call    txt_return
    ret
l9: call    txt_home
    ret
j0: call    txt_end
    ret

tf_upd macro
    push    bp, ax, bx, cx, dx
    mov     bp, #1
    call    _txt_upd
    pop     dx, cx, bx, ax, bp
#em

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ txt_draw                                          ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
_txt_draw:
    mov     cu_enabled, 0
l0: xor     ax, ax
    mov     cx, 8 by 0
    mov     al, txt_flags
    test    al, F_TXT_END
    jnz     >l2
    mov     al, txt_flags
    test    al, F_TXT_EDIT
    jz      >l1
    mov     cx, 7 by 0
l1: mov     ax, txt_pos
    mov     bx, txt_buffer
    vg_str  micro_font, bx, ax, cx, 1
    cmp     ch, 7
    jne     >l3
    mov     bx, ax
    xor     ax, ax
    xor     cx, cx
    mov     cl, 6
    mov     al, b txt_char_idx
    mul     cx
    add     bh, al
    mov     cu_pos, bx
    mov     cu_enabled, 1
l3: add     bp, type text_field
    jmp     l0
l2: ret

tf_draw macro
    push    bp, ax, bx, cx, dx
    mov     bp, #1
    call    _txt_draw
    pop     dx, cx, bx, ax, bp
#em

