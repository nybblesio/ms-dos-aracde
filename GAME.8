;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ one-on-one                                        ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³ copyright (C) 2017 jeff panici                    ³
;³ https://nybbles.io                                ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

code segment
    jmp     start

include constant.8
include macro.8
include string.8
include input.8
include control.8
include memory.8
include io.8
include bank.8
include timer.8
include vga.8
include video.8
include sound.8

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ game structures & variables                       ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
even

state               db      ?
fps                 db      ?
exit_code           db      ?
temp_ptr            dw      ?
draw_flag           db      ?

frame_rate:         strdef  '00'
game_title:         strdef  'ONE-ON-ONE'
game_copyright:     strdef  '(C) 2017 JEFF PANICI'

input_actions:
    defie   T_INPUT_KEY, K_LEFT,  p1_left,  0, 0
    defie   T_INPUT_KEY, K_RIGHT, p1_right, 0, 0
    defie   T_INPUT_KEY, K_UP,    p1_up,    0, 0
    defie   T_INPUT_KEY, K_DOWN,  p1_down,  0, 0
    defie   0,           0,       0,        0, 0

;ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;³ main game engine                                  ³
;ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;³                                                   ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;³                                                   ³
;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
p1_right:
    loadspr 0
    es add  s_x, 4
    es cmp  s_x, 230
    jb      >l0
    es mov  s_x, 230
l0: ret

p1_down:
    loadspr 0
    es add  s_y, 4
    es cmp  s_y, 230
    jb      >l0
    es mov  s_y, 230
l0: ret

p1_left:
    loadspr 0
    es sub  s_x, 4
    es cmp  s_x, 10
    ja      >l0
    es mov  s_x, 10
l0: ret

p1_up:
    loadspr 0
    es sub  s_y, 4
    es cmp  s_y, 10
    ja      >l0
    es mov  s_y, 10
l0: ret

fps_timer:
    reset_timer
    mov     di, frame_rate + 1
    xor     ax, ax
    cs mov  al, fps
    call    put_dec2
    cs mov  fps, 0
    ret
;
; allocate memory
;
allocate:
    alloc   SZ_CTRL_RAM / 16,  offset ctrl_ram_ptr
    memset  ctrl_ram_ptr, 0, SZ_CTRL_RAM, 0

    mov     es, ctrl_ram_ptr
    mov     bp, 0

    alloc   SZ_TILE_BANK / 16, offset temp_ptr
    memset  temp_ptr, 0, SZ_TILE_BANK, 024h
    es_movm c_bg_tiles, temp_ptr

    alloc   SZ_TILE_BANK / 16, offset temp_ptr
    memset  temp_ptr,   0, SZ_TILE_BANK, 07fh
    memset  temp_ptr,   0, 128, 07ah
    memset  temp_ptr, 128, 128, 08ah
    memset  temp_ptr, 256, 256, 09ah
    memset  temp_ptr, 512, 256, 0abh
    memset  temp_ptr, 768, 256, 0bah
    es_movm c_spr_tiles, temp_ptr

    alloc   SZ_VRAM / 16, offset back_buffer_ptr
    memset  back_buffer_ptr, 0, SZ_VRAM, 0

    ret

;
; initialize everything
;
init:
    call    allocate
    mode_13
    mode_p  modeq_params
    call    init_keyboard_isr
    call    init_timer_isr
    sound_init

    loadspr 0
    setspr  0, 0, 100, 10, F_SPR_ENABLED, 0

    ldfreetimer
    es mov  tm_callback, fps_timer
    es mov  tm_frames, 60
    es mov  tm_count, 60
    es mov  tm_flags, F_TIMER_ENABLED

    ret

;
; update the game state
;
update:
    fire_timers

    cs mov  bp, input_actions
    mov     cx, 4
p0: next_key
    cmp     al, 0
    je      >p4
    cmp     al, K_ESC
    je      >p5
    dec     cx
    cmp     cx, 0
    jz      >p4
p1: cs mov  bl, ia_code
    cmp     bl, 0
    jnz     >p2
    cs mov  bp, input_actions
    jmp     p0
p2: cmp     al, bl
    je      >p3
    cs add  bp, type input_action
    jmp     p1
p3: cs call [ia_callback]
    jmp     p0
p4: ret
p5: jmp     exit

;
; render the video scene
;   bg 1
;   fg
;   bg 2
;   text

draw_title:
    frect   50 by 33, 150 by 85, 8 by 0
    rect    50 by 33, 150 by 85, 0 by 0

    string  offset large_font, game_title, 88 by 45, 1 by 0, 0
    string  offset large_font, game_title, 89 by 46, 7 by 0, 0

    string  offset micro_font, game_title, 96 by 74, 1 by 0, 1
    string  offset micro_font, game_title, 97 by 75, 7 by 0, 1

    string  offset micro_font, game_copyright, 62 by 90, 1 by 0, 1
    string  offset micro_font, game_copyright, 63 by 91, 7 by 0, 1

    ret

draw:
    cs cmp  draw_flag, 1
    je      >l0
    ret
l0: cs mov  draw_flag, 0
    video_bg1
    video_fg
    video_bg2
    call    draw_title
#if DEBUG
    string  offset micro_font, frame_rate, 244 by 251, 0 by 0, 1
#endif
    ret

show:
    is_vblank
    cmp     al, 0
    jnz     >l0
    ret
l0: flip
    wait_novblank
    cs inc  fps
    cs mov  draw_flag, 1
    ret

;
; entry point
;
start:
    call    init

;
; the heart
;
game_loop:
    cs call update
    cs call draw
    cs call show
    jmp     game_loop

;
; the end
;
exit:
    sound_shutdown
    call    reset_timer_isr
    call    reset_keyboard_isr
    mode_03
    mov     ah, 04ch
    mov     al, exit_code
    int     21h
    ret
